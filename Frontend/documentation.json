{
    "pipes": [],
    "interfaces": [
        {
            "name": "Todo",
            "id": "interface-Todo-7e1d25c821c291437fac89d61ef4092e514c18e1e8e94bba4872e974b4804c4e4aeb2bb34c1bffcca795a20448cb830c1fd75478d8909995ff0c0957b6dc28fe",
            "file": "src/app/models/todo.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Todo {\n  id: number;\n  title: string;\n  description?: string;\n  isCompleted: boolean;\n  dueDate?: Date;\n  priority?: 'low' | 'medium' | 'high';\n} ",
            "properties": [
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "dueDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "isCompleted",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "priority",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"low\" | \"medium\" | \"high\"",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "TodoDialogData",
            "id": "interface-TodoDialogData-1ce7e382f44781af0c4c8e5bce6efbe173f73eaf0aa2979b00ab36835299dafab8b2b3a944445ac5f6a0f5dba1febf7f851c693f7f0d974e9ec481b8ed8fedb1",
            "file": "src/app/components/todo/todo-dialog/todo-dialog.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, Inject } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators, ReactiveFormsModule } from '@angular/forms';\nimport { MatDialogRef, MAT_DIALOG_DATA, MatDialogModule } from '@angular/material/dialog';\nimport { CommonModule } from '@angular/common';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { Todo } from '../../../models/todo.model';\n\ninterface TodoDialogData extends Todo {\n  description?: string;\n  dueDate?: Date;\n  priority?: 'low' | 'medium' | 'high';\n}\n\n@Component({\n  selector: 'app-todo-dialog',\n  standalone: true,\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    MatDialogModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatSelectModule,\n    MatDatepickerModule,\n    MatNativeDateModule,\n    MatButtonModule\n  ],\n  providers: [\n    MatDatepickerModule,\n    MatNativeDateModule\n  ],\n  template: `\n    <h2 mat-dialog-title>{{ data.id ? 'Görevi Düzenle' : 'Yeni Görev' }}</h2>\n    <form [formGroup]=\"todoForm\" (ngSubmit)=\"onSubmit()\">\n      <mat-dialog-content>\n        <mat-form-field appearance=\"fill\">\n          <mat-label>Başlık</mat-label>\n          <input matInput formControlName=\"title\" placeholder=\"Görev başlığı\">\n          <mat-error *ngIf=\"todoForm.get('title')?.hasError('required')\">\n            Başlık zorunludur\n          </mat-error>\n        </mat-form-field>\n\n        <mat-form-field appearance=\"fill\">\n          <mat-label>Açıklama</mat-label>\n          <textarea matInput formControlName=\"description\" rows=\"3\" placeholder=\"Görev açıklaması\"></textarea>\n          <mat-error *ngIf=\"todoForm.get('description')?.hasError('required')\">\n            Açıklama zorunludur\n          </mat-error>\n        </mat-form-field>\n\n        <mat-form-field appearance=\"fill\">\n          <mat-label>Bitiş Tarihi</mat-label>\n          <input matInput [matDatepicker]=\"picker\" formControlName=\"dueDate\">\n          <mat-datepicker-toggle matSuffix [for]=\"picker\"></mat-datepicker-toggle>\n          <mat-datepicker #picker></mat-datepicker>\n          <mat-error *ngIf=\"todoForm.get('dueDate')?.hasError('required')\">\n            Bitiş tarihi zorunludur\n          </mat-error>\n        </mat-form-field>\n\n        <mat-form-field appearance=\"fill\">\n          <mat-label>Öncelik</mat-label>\n          <mat-select formControlName=\"priority\">\n            <mat-option *ngFor=\"let priority of priorities\" [value]=\"priority\">\n              {{ priority | titlecase }}\n            </mat-option>\n          </mat-select>\n          <mat-error *ngIf=\"todoForm.get('priority')?.hasError('required')\">\n            Öncelik zorunludur\n          </mat-error>\n        </mat-form-field>\n      </mat-dialog-content>\n\n      <mat-dialog-actions align=\"end\">\n        <button mat-button (click)=\"onCancel()\">İptal</button>\n        <button mat-raised-button color=\"primary\" type=\"submit\" [disabled]=\"!todoForm.valid\">\n          {{ data.id ? 'Güncelle' : 'Ekle' }}\n        </button>\n      </mat-dialog-actions>\n    </form>\n  `,\n  styles: [`\n    mat-dialog-content {\n      display: flex;\n      flex-direction: column;\n      gap: 1rem;\n      min-width: 400px;\n    }\n\n    mat-form-field {\n      width: 100%;\n    }\n\n    mat-dialog-actions {\n      padding: 16px 0;\n    }\n  `]\n})\nexport class TodoDialogComponent {\n  todoForm: FormGroup;\n  priorities = ['low', 'medium', 'high'] as const;\n\n  constructor(\n    private fb: FormBuilder,\n    private dialogRef: MatDialogRef<TodoDialogComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: TodoDialogData\n  ) {\n    this.todoForm = this.fb.group({\n      title: [data.title || '', [Validators.required]],\n      description: [data.description || '', [Validators.required]],\n      dueDate: [data.dueDate || new Date(), [Validators.required]],\n      priority: [data.priority || 'medium', [Validators.required]]\n    });\n  }\n\n  onSubmit(): void {\n    if (this.todoForm.valid) {\n      this.dialogRef.close(this.todoForm.value);\n    }\n  }\n\n  onCancel(): void {\n    this.dialogRef.close();\n  }\n} ",
            "properties": [
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "dueDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "priority",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"low\" | \"medium\" | \"high\"",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 16
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [
                "Todo"
            ]
        },
        {
            "name": "TodoViewModel",
            "id": "interface-TodoViewModel-e4b4a248251099aa7271f683d93c12ac03c601aeb9b60a8615c03915392a3ade7138980342f55253f03f2a2c086995aedfe3c12164cae896c3ee866a1bea0e77",
            "file": "src/app/components/todo/todo.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, OnInit, ViewChild } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatDividerModule } from '@angular/material/divider';\nimport { MatListModule } from '@angular/material/list';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatBadgeModule } from '@angular/material/badge';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatRippleModule } from '@angular/material/core';\nimport { MatBottomSheetModule } from '@angular/material/bottom-sheet';\nimport { MatTreeModule } from '@angular/material/tree';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { TodoService } from '../../services/todo.service';\nimport { Todo } from '../../models/todo.model';\nimport { TodoDialogComponent } from './todo-dialog/todo-dialog.component';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { MatDialog } from '@angular/material/dialog';\nimport { MatSort } from '@angular/material/sort';\nimport { MatPaginator, PageEvent } from '@angular/material/paginator';\nimport { BehaviorSubject, Observable, of } from 'rxjs';\nimport { catchError, finalize, map, tap } from 'rxjs/operators';\nimport { HttpClient } from '@angular/common/http';\n\ninterface TodoViewModel extends Todo {\n  description?: string;\n  dueDate?: Date;\n  priority?: 'low' | 'medium' | 'high';\n}\n\n@Component({\n  selector: 'app-todo',\n  standalone: true,\n  imports: [\n    CommonModule,\n    MatTableModule,\n    MatButtonModule,\n    MatIconModule,\n    MatDialogModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatSelectModule,\n    MatDatepickerModule,\n    MatNativeDateModule,\n    MatCheckboxModule,\n    MatSnackBarModule,\n    MatProgressSpinnerModule,\n    MatCardModule,\n    MatTooltipModule,\n    MatSortModule,\n    MatPaginatorModule,\n    MatMenuModule,\n    MatDividerModule,\n    MatListModule,\n    MatChipsModule,\n    MatBadgeModule,\n    MatExpansionModule,\n    MatStepperModule,\n    MatTabsModule,\n    MatAutocompleteModule,\n    MatButtonToggleModule,\n    MatSlideToggleModule,\n    MatSliderModule,\n    MatSidenavModule,\n    MatToolbarModule,\n    MatGridListModule,\n    MatRadioModule,\n    MatProgressBarModule,\n    MatRippleModule,\n    MatBottomSheetModule,\n    MatTreeModule\n  ],\n  providers: [\n    MatDatepickerModule,\n    MatNativeDateModule\n  ],\n  template: `\n    <div class=\"todo-container\">\n      <mat-card>\n        <mat-card-header>\n          <mat-card-title>Görevlerim</mat-card-title>\n          <mat-card-subtitle>Yapılacak işlerin listesi</mat-card-subtitle>\n          <button mat-raised-button color=\"primary\" (click)=\"openDialog()\">\n            <mat-icon>add</mat-icon>\n            Yeni Görev\n          </button>\n        </mat-card-header>\n\n        <mat-card-content>\n          <div class=\"table-container\">\n            <table mat-table [dataSource]=\"dataSource\" matSort>\n              <!-- Başlık Sütunu -->\n              <ng-container matColumnDef=\"title\">\n                <th mat-header-cell *matHeaderCellDef mat-sort-header> Başlık </th>\n                <td mat-cell *matCellDef=\"let todo\"> {{todo.title}} </td>\n              </ng-container>\n\n              <!-- Açıklama Sütunu -->\n              <ng-container matColumnDef=\"description\">\n                <th mat-header-cell *matHeaderCellDef mat-sort-header> Açıklama </th>\n                <td mat-cell *matCellDef=\"let todo\"> {{todo.description}} </td>\n              </ng-container>\n\n              <!-- Bitiş Tarihi Sütunu -->\n              <ng-container matColumnDef=\"dueDate\">\n                <th mat-header-cell *matHeaderCellDef mat-sort-header> Bitiş Tarihi </th>\n                <td mat-cell *matCellDef=\"let todo\">\n                  {{todo.dueDate | date:'dd.MM.yyyy'}}\n                </td>\n              </ng-container>\n\n              <!-- Öncelik Sütunu -->\n              <ng-container matColumnDef=\"priority\">\n                <th mat-header-cell *matHeaderCellDef mat-sort-header> Öncelik </th>\n                <td mat-cell *matCellDef=\"let todo\">\n                  <mat-chip [color]=\"getPriorityColor(todo.priority)\" selected>\n                    {{todo.priority}}\n                  </mat-chip>\n                </td>\n              </ng-container>\n\n              <!-- Durum Sütunu -->\n              <ng-container matColumnDef=\"isCompleted\">\n                <th mat-header-cell *matHeaderCellDef> Durum </th>\n                <td mat-cell *matCellDef=\"let todo\">\n                  <mat-checkbox\n                    [checked]=\"todo.isCompleted\"\n                    (change)=\"toggleComplete(todo)\"\n                    color=\"primary\">\n                  </mat-checkbox>\n                </td>\n              </ng-container>\n\n              <!-- İşlemler Sütunu -->\n              <ng-container matColumnDef=\"actions\">\n                <th mat-header-cell *matHeaderCellDef> İşlemler </th>\n                <td mat-cell *matCellDef=\"let todo\">\n                  <button mat-icon-button [matMenuTriggerFor]=\"menu\" aria-label=\"İşlemler\">\n                    <mat-icon>more_vert</mat-icon>\n                  </button>\n                  <mat-menu #menu=\"matMenu\">\n                    <button mat-menu-item (click)=\"openDialog(todo)\">\n                      <mat-icon>edit</mat-icon>\n                      <span>Düzenle</span>\n                    </button>\n                    <button mat-menu-item (click)=\"deleteTodo(todo)\">\n                      <mat-icon>delete</mat-icon>\n                      <span>Sil</span>\n                    </button>\n                  </mat-menu>\n                </td>\n              </ng-container>\n\n              <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n              <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n            </table>\n\n            <mat-paginator\n              [pageSizeOptions]=\"[5, 10, 25, 100]\"\n              [pageSize]=\"10\"\n              [length]=\"totalItems\"\n              (page)=\"onPageChange($event)\">\n            </mat-paginator>\n          </div>\n        </mat-card-content>\n      </mat-card>\n    </div>\n  `,\n  styles: [`\n    .todo-container {\n      padding: 20px;\n      max-width: 1200px;\n      margin: 0 auto;\n    }\n\n    mat-card {\n      margin-bottom: 20px;\n    }\n\n    mat-card-header {\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n      margin-bottom: 20px;\n    }\n\n    .table-container {\n      position: relative;\n      min-height: 200px;\n      max-height: 400px;\n      overflow: auto;\n    }\n\n    table {\n      width: 100%;\n    }\n\n    .mat-column-actions {\n      width: 120px;\n      text-align: center;\n    }\n\n    .mat-column-isCompleted {\n      width: 100px;\n      text-align: center;\n    }\n\n    .mat-column-priority {\n      width: 120px;\n    }\n\n    .mat-column-dueDate {\n      width: 120px;\n    }\n\n    .loading-shade {\n      position: absolute;\n      top: 0;\n      left: 0;\n      bottom: 0;\n      right: 0;\n      background: rgba(0, 0, 0, 0.15);\n      z-index: 1;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n    }\n\n    .error-message {\n      color: #f44336;\n      padding: 16px;\n      text-align: center;\n    }\n  `]\n})\nexport class TodoComponent implements OnInit {\n  todos: TodoViewModel[] = [];\n  displayedColumns: string[] = ['title', 'description', 'dueDate', 'priority', 'isCompleted', 'actions'];\n  dataSource: MatTableDataSource<TodoViewModel>;\n  isLoading = false;\n  totalItems = 0;\n  currentPage = 0;\n  pageSize = 10;\n\n  @ViewChild(MatSort) sort!: MatSort;\n  @ViewChild(MatPaginator) paginator!: MatPaginator;\n\n  constructor(\n    private todoService: TodoService,\n    private dialog: MatDialog,\n    private snackBar: MatSnackBar,\n    private http: HttpClient\n  ) {\n    this.dataSource = new MatTableDataSource<TodoViewModel>();\n  }\n\n  ngOnInit(): void {\n    this.loadTodos();\n  }\n\n  ngAfterViewInit(): void {\n    this.dataSource.sort = this.sort;\n    this.dataSource.paginator = this.paginator;\n  }\n\n  loadTodos(): void {\n    this.isLoading = true;\n    this.todoService.getTodos().pipe(\n      map(todos => {\n        return todos.map(todo => ({\n          ...todo,\n          description: todo.description || '',\n          dueDate: todo.dueDate ? new Date(todo.dueDate) : new Date(),\n          priority: todo.priority || 'medium'\n        }));\n      }),\n      tap(todos => {\n        this.todos = todos;\n        this.dataSource.data = todos;\n        this.totalItems = todos.length;\n      }),\n      catchError(error => {\n        console.error('Görevler yüklenirken hata oluştu:', error);\n        this.showNotification('Görevler yüklenirken bir hata oluştu', 'error');\n        return of([]);\n      }),\n      finalize(() => {\n        this.isLoading = false;\n      })\n    ).subscribe();\n  }\n\n  openDialog(todo?: TodoViewModel): void {\n    const dialogRef = this.dialog.open(TodoDialogComponent, {\n      width: '500px',\n      data: todo || {}\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n      if (result) {\n        if (todo?.id) {\n          this.updateTodo(todo.id, result);\n        } else {\n          this.createTodo(result);\n        }\n      }\n    });\n  }\n\n  createTodo(todo: TodoViewModel): void {\n    this.todoService.createTodo(todo).subscribe({\n      next: () => {\n        this.showNotification('Görev başarıyla oluşturuldu', 'success');\n        this.loadTodos();\n      },\n      error: (error) => {\n        console.error('Görev oluşturulurken hata:', error);\n        this.showNotification('Görev oluşturulurken bir hata oluştu', 'error');\n      }\n    });\n  }\n\n  updateTodo(id: number, todo: TodoViewModel): void {\n    this.todoService.updateTodo(id, todo).subscribe({\n      next: () => {\n        this.showNotification('Görev başarıyla güncellendi', 'success');\n        this.loadTodos();\n      },\n      error: (error) => {\n        console.error('Görev güncellenirken hata:', error);\n        this.showNotification('Görev güncellenirken bir hata oluştu', 'error');\n      }\n    });\n  }\n\n  deleteTodo(todo: TodoViewModel): void {\n    if (confirm('Bu görevi silmek istediğinizden emin misiniz?')) {\n      this.todoService.deleteTodo(todo.id).subscribe({\n        next: () => {\n          this.showNotification('Görev başarıyla silindi', 'success');\n          this.loadTodos();\n        },\n        error: (error) => {\n          console.error('Görev silinirken hata:', error);\n          this.showNotification('Görev silinirken bir hata oluştu', 'error');\n        }\n      });\n    }\n  }\n\n  toggleComplete(todo: TodoViewModel): void {\n    this.todoService.toggleTodoStatus(todo.id).subscribe({\n      next: () => {\n        this.showNotification('Görev durumu güncellendi', 'success');\n        this.loadTodos();\n      },\n      error: (error) => {\n        console.error('Görev durumu güncellenirken hata:', error);\n        this.showNotification('Görev durumu güncellenirken bir hata oluştu', 'error');\n      }\n    });\n  }\n\n  onPageChange(event: PageEvent): void {\n    this.currentPage = event.pageIndex;\n    this.pageSize = event.pageSize;\n    this.loadTodos();\n  }\n\n  getPriorityColor(priority: string): string {\n    switch (priority?.toLowerCase()) {\n      case 'high':\n        return 'warn';\n      case 'medium':\n        return 'accent';\n      case 'low':\n        return 'primary';\n      default:\n        return '';\n    }\n  }\n\n  showNotification(message: string, type: 'success' | 'error'): void {\n    this.snackBar.open(message, 'Kapat', {\n      duration: 3000,\n      horizontalPosition: 'end',\n      verticalPosition: 'top',\n      panelClass: type === 'success' ? ['success-snackbar'] : ['error-snackbar']\n    });\n  }\n} ",
            "properties": [
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 52
                },
                {
                    "name": "dueDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "priority",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"low\" | \"medium\" | \"high\"",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 54
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [
                "Todo"
            ]
        }
    ],
    "injectables": [
        {
            "name": "TodoService",
            "id": "injectable-TodoService-a233be238258eda7349d341cb02aaad00e0357db15e3144b0627d8f1f0058740bbeb46e8c0e1d0acb5671541e295fd200662f14fe7c341ea20a0333f663138e1",
            "file": "src/app/services/todo.service.ts",
            "properties": [
                {
                    "name": "apiUrl",
                    "defaultValue": "'http://localhost:5155/api/Todo'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "createTodo",
                    "args": [
                        {
                            "name": "todo",
                            "type": "Todo",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Todo>",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nYeni yapılacak ekle\n",
                    "description": "<p>Yeni yapılacak ekle</p>\n",
                    "jsdoctags": [
                        {
                            "name": "todo",
                            "type": "Todo",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteTodo",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nYapılacağı sil\n",
                    "description": "<p>Yapılacağı sil</p>\n",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTodo",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Todo>",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nID'ye göre yapılacak getir\n",
                    "description": "<p>ID&#39;ye göre yapılacak getir</p>\n",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTodos",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Todo[]>",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nTüm yapılacakları getir\n",
                    "description": "<p>Tüm yapılacakları getir</p>\n"
                },
                {
                    "name": "toggleTodoStatus",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Todo>",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nYapılacağın durumunu tersine çevir\n",
                    "description": "<p>Yapılacağın durumunu tersine çevir</p>\n",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateTodo",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "todo",
                            "type": "Todo",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Todo>",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nMevcut yapılacağı güncelle\n",
                    "description": "<p>Mevcut yapılacağı güncelle</p>\n",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "todo",
                            "type": "Todo",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { Todo } from '../models/todo.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TodoService {\n  private apiUrl = 'http://localhost:5155/api/Todo';  // Backend API URL\n\n  constructor(private http: HttpClient) { }\n\n  /**\n   * Tüm yapılacakları getir\n   */\n  getTodos(): Observable<Todo[]> {\n    return this.http.get<Todo[]>(this.apiUrl);\n  }\n\n  /**\n   * ID'ye göre yapılacak getir\n   */\n  getTodo(id: number): Observable<Todo> {\n    return this.http.get<Todo>(`${this.apiUrl}/${id}`);\n  }\n\n  /**\n   * Yeni yapılacak ekle\n   */\n  createTodo(todo: Todo): Observable<Todo> {\n    return this.http.post<Todo>(this.apiUrl, todo);\n  }\n\n  /**\n   * Mevcut yapılacağı güncelle\n   */\n  updateTodo(id: number, todo: Todo): Observable<Todo> {\n    return this.http.put<Todo>(`${this.apiUrl}/${id}`, todo);\n  }\n\n  /**\n   * Yapılacağı sil\n   */\n  deleteTodo(id: number): Observable<void> {\n    return this.http.delete<void>(`${this.apiUrl}/${id}`);\n  }\n\n  /**\n   * Yapılacağın durumunu tersine çevir\n   */\n  toggleTodoStatus(id: number): Observable<Todo> {\n    return this.http.patch<Todo>(`${this.apiUrl}/${id}/toggle`, {});\n  }\n} ",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [
        {
            "name": "HttpClientMock",
            "id": "class-HttpClientMock-f472e924248a09bb01c6db2daa70557e8fe1ffb5a39f0f085fc489a331cec9773ac12c3313cbddc48a3c01db6de0e36ba1f68aabd7e8d91b9f0ac4cd4264efed",
            "file": "src/app/components/todo/todo.component.stories.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { moduleMetadata, Meta, StoryObj } from '@storybook/angular';\nimport { TodoComponent } from './todo.component';\nimport { MatDialogModule, MatDialog } from '@angular/material/dialog';\nimport { MatSnackBarModule, MatSnackBar } from '@angular/material/snack-bar';\nimport { HttpClientModule, HttpClient, HttpErrorResponse } from '@angular/common/http';\nimport { CommonModule } from '@angular/common';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { TodoService } from '../../services/todo.service';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { of, Observable, throwError, NEVER, tap, catchError } from 'rxjs';\nimport { TodoDialogComponent } from './todo-dialog/todo-dialog.component';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { within, userEvent } from '@storybook/testing-library';\n\n// Örnek veri\nconst sampleTodos = [\n  { \n    id: 1, \n    title: 'Görev 1', \n    description: 'Bu bir test görevidir', \n    isCompleted: false\n  },\n  { \n    id: 2, \n    title: 'Görev 2', \n    description: 'Başka bir test görevidir', \n    isCompleted: true\n  },\n  { \n    id: 3, \n    title: 'Görev 3', \n    description: 'Üçüncü görev', \n    isCompleted: false\n  }\n];\n\n// Gelişmiş HttpClient mock sınıfı\nclass HttpClientMock {\n  private todos = [...sampleTodos];\n\n  get() { \n    return of(this.todos); \n  }\n\n  post(url: string, todo: any) { \n    const newTodo = { ...todo, id: this.todos.length + 1 };\n    this.todos.push(newTodo);\n    return of(newTodo); \n  }\n\n  put(url: string, todo: any) { \n    const index = this.todos.findIndex(t => t.id === todo.id);\n    if (index !== -1) {\n      this.todos[index] = todo;\n    }\n    return of(todo); \n  }\n\n  delete(url: string) { \n    const id = parseInt(url.split('/').pop() || '0');\n    this.todos = this.todos.filter(t => t.id !== id);\n    return of({}); \n  }\n\n  patch(url: string) { \n    const id = parseInt(url.split('/')[0]);\n    const todo = this.todos.find(t => t.id === id);\n    if (todo) {\n      todo.isCompleted = !todo.isCompleted;\n    }\n    return of(todo); \n  }\n}\n\n// Gelişmiş Mock DialogRef\nconst mockDialogRef = {\n  afterClosed: () => of({\n    title: 'Yeni Test Görevi',\n    description: 'Bu bir test görevidir',\n    priority: 'medium',\n    dueDate: new Date(),\n    isCompleted: false\n  }),\n  close: () => {}\n};\n\n// Gelişmiş Mock Dialog\nconst mockDialog = {\n  open: () => mockDialogRef,\n  closeAll: () => {}\n};\n\n// Gelişmiş Mock SnackBar\nconst mockSnackBar = {\n  open: (message: string, action: string, config: any) => ({\n    onAction: () => of({ dismissedByAction: true }),\n    afterDismissed: () => of({ dismissedByAction: false })\n  })\n};\n\nexport default {\n  title: 'Components/Todo',\n  component: TodoComponent,\n  decorators: [\n    moduleMetadata({\n      imports: [\n        CommonModule,\n        MatTableModule,\n        MatButtonModule,\n        MatIconModule,\n        MatCheckboxModule,\n        MatSnackBarModule,\n        HttpClientModule,\n        MatDialogModule,\n        BrowserAnimationsModule,\n        ReactiveFormsModule,\n        MatFormFieldModule,\n        MatInputModule,\n        MatSelectModule,\n        MatDatepickerModule,\n        MatNativeDateModule,\n        TodoDialogComponent\n      ],\n      providers: [\n        TodoService,\n        { provide: HttpClient, useClass: HttpClientMock },\n        { provide: MatDialog, useValue: mockDialog },\n        { provide: MatSnackBar, useValue: mockSnackBar }\n      ]\n    })\n  ],\n  parameters: {\n    layout: 'centered',\n    docs: {\n      description: {\n        component: 'Todo bileşeni, yapılacaklar listesini yönetmek için kullanılır. Görev ekleme, düzenleme, silme ve tamamlama işlemlerini destekler.'\n      }\n    },\n    actions: {\n      argTypesRegex: '^on[A-Z].*'\n    },\n    controls: {\n      matchers: {\n        color: /(background|color)$/i,\n        date: /Date$/\n      }\n    }\n  },\n  tags: ['autodocs'],\n} as Meta<TodoComponent>;\n\ntype Story = StoryObj<TodoComponent>;\n\n// Varsayılan durum\nexport const Default: Story = {\n  args: {},\n  parameters: {\n    docs: {\n      description: {\n        story: 'Varsayılan todo listesi görünümü. Tüm özellikler aktif ve örnek verilerle dolu.'\n      }\n    }\n  },\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n    \n    // Yeni görev ekleme butonunu bul\n    const addButton = canvas.getByRole('button', { name: /yeni görev/i });\n    \n    // Butona tıkla\n    await userEvent.click(addButton);\n    \n    // Dialog'un açıldığını kontrol et\n    const dialog = canvas.getByRole('dialog');\n    expect(dialog).toBeTruthy();\n  }\n};\n\n// Boş liste durumu\nexport const EmptyList: Story = {\n  decorators: [\n    moduleMetadata({\n      providers: [\n        { \n          provide: HttpClient, \n          useClass: class {\n            get() { return of([]); }\n            post() { return of({ id: 1, title: 'Yeni Görev', isCompleted: false }); }\n            put() { return of({}); }\n            delete() { return of({}); }\n            patch() { return of({}); }\n          }\n        }\n      ]\n    })\n  ],\n  parameters: {\n    docs: {\n      description: {\n        story: 'Henüz hiç görev olmadığında görünen boş liste durumu.'\n      }\n    }\n  }\n};\n\n// Yükleme durumu\nexport const Loading: Story = {\n  decorators: [\n    moduleMetadata({\n      providers: [\n        { \n          provide: HttpClient, \n          useClass: class {\n            get() { \n              // Asla tamamlanmayan bir observable\n              return NEVER;\n            }\n            post() { return of({}); }\n            put() { return of({}); }\n            delete() { return of({}); }\n            patch() { return of({}); }\n          }\n        }\n      ]\n    })\n  ],\n  parameters: {\n    docs: {\n      description: {\n        story: 'Görevler yüklenirken görünen yükleme durumu.'\n      }\n    }\n  }\n};\n\n// Hata durumu\nexport const Error: Story = {\n  decorators: [\n    moduleMetadata({\n      providers: [\n        { \n          provide: HttpClient, \n          useClass: class {\n            get() { \n              return of([]).pipe(\n                catchError(() => throwError(() => new HttpErrorResponse({ error: 'API Hatası' })))\n              );\n            }\n            post() { return of({}); }\n            put() { return of({}); }\n            delete() { return of({}); }\n            patch() { return of({}); }\n          }\n        }\n      ]\n    })\n  ],\n  parameters: {\n    docs: {\n      description: {\n        story: 'API hatası durumunda görünen hata mesajı.'\n      }\n    }\n  }\n}; ",
            "inputsClass": [],
            "outputsClass": [],
            "properties": [
                {
                    "name": "todos",
                    "defaultValue": "[...sampleTodos]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 47,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "get",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "patch",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "post",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "todo",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "todo",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "put",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "todo",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "todo",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "AboutComponent",
            "id": "component-AboutComponent-2dd90ff092ff9e0856026b8bc03e30b92ba5cf17c025c7d54a2d3067d6405d3a77b90ea28cf8ed71545da95aff0c59d68b097d83b437c7e3d2985c9683c08970",
            "file": "src/app/components/about/about.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-about",
            "styleUrls": [
                "./about.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./about.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "MatCardModule",
                    "type": "module"
                },
                {
                    "name": "MatIconModule",
                    "type": "module"
                },
                {
                    "name": "MatButtonModule",
                    "type": "module"
                },
                {
                    "name": "RouterModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatButtonModule } from '@angular/material/button';\nimport { RouterModule } from '@angular/router';\n\n@Component({\n  selector: 'app-about',\n  templateUrl: './about.component.html',\n  styleUrls: ['./about.component.scss'],\n  standalone: true,\n  imports: [\n    MatCardModule,\n    MatIconModule,\n    MatButtonModule,\n    RouterModule\n  ]\n})\nexport class AboutComponent {\n  // Burada ihtiyaç duyulan ekstra işlevsellikler eklenebilir\n} ",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".about-container {\n  max-width: 1200px;\n  margin: 0 auto;\n  font-family: 'Roboto', sans-serif;\n  color: #333;\n}\n\n.section-title {\n  font-size: 2rem;\n  font-weight: 600;\n  color: #1976d2;\n  margin-bottom: 0.5rem;\n  text-align: center;\n}\n\n.divider {\n  width: 60px;\n  height: 3px;\n  background-color: #1976d2;\n  margin: 0 auto 2rem;\n  border-radius: 2px;\n}\n\n/* Banner Section */\n.banner-section {\n  position: relative;\n  height: 350px;\n  background: linear-gradient(135deg, #0f2027, #203a43, #2c5364);\n  background-image: url('/assets/images/banner.svg');\n  background-size: cover;\n  background-position: center;\n  color: white;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin-bottom: 3rem;\n  border-radius: 10px;\n  overflow: hidden;\n  box-shadow: 0 15px 30px rgba(0, 0, 0, 0.1);\n}\n\n.banner-pattern-overlay {\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  opacity: 0.4;\n  background-image: url(\"data:image/svg+xml,%3Csvg width='60' height='60' viewBox='0 0 60 60' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='none' fill-rule='evenodd'%3E%3Cg fill='%23ffffff' fill-opacity='0.15'%3E%3Cpath d='M36 34v-4h-2v4h-4v2h4v4h2v-4h4v-2h-4zm0-30V0h-2v4h-4v2h4v4h2V6h4V4h-4zM6 34v-4H4v4H0v2h4v4h2v-4h4v-2H6zM6 4V0H4v4H0v2h4v4h2V6h4V4H6z'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E\");\n}\n\n.banner-content {\n  position: relative;\n  text-align: center;\n  padding: 2rem;\n  z-index: 1;\n  width: 100%;\n  max-width: 800px;\n}\n\n.banner-title-container {\n  display: inline-block;\n  margin-bottom: 1.5rem;\n}\n\n.banner-title {\n  font-size: 3.5rem;\n  font-weight: 800;\n  margin-bottom: 0.5rem;\n  text-shadow: 0 2px 10px rgba(0, 0, 0, 0.3);\n  letter-spacing: 1px;\n  color: #ffffff;\n  text-transform: uppercase;\n}\n\n.banner-title-underline {\n  height: 5px;\n  width: 100px;\n  background: linear-gradient(90deg, #64b5f6, #1976d2);\n  margin: 0.5rem auto 0;\n  border-radius: 5px;\n}\n\n.banner-text {\n  font-size: 1.4rem;\n  max-width: 600px;\n  margin: 0 auto;\n  font-weight: 300;\n  line-height: 1.5;\n  letter-spacing: 0.5px;\n  color: rgba(255, 255, 255, 0.95);\n  text-shadow: 0 1px 3px rgba(0, 0, 0, 0.2);\n}\n\n@media (max-width: 768px) {\n  .banner-section {\n    height: 300px;\n  }\n  \n  .banner-title {\n    font-size: 2.5rem;\n  }\n  \n  .banner-text {\n    font-size: 1.2rem;\n  }\n}\n\n@media (max-width: 576px) {\n  .banner-title {\n    font-size: 2rem;\n  }\n  \n  .banner-text {\n    font-size: 1rem;\n  }\n}\n\n/* Overview Section */\n.overview-section {\n  display: flex;\n  gap: 3rem;\n  margin-bottom: 3rem;\n  align-items: center;\n  \n  @media (max-width: 768px) {\n    flex-direction: column;\n  }\n}\n\n.section-content {\n  flex: 1;\n  \n  .section-title {\n    text-align: left;\n  }\n  \n  .divider {\n    margin: 0.5rem 0 1.5rem;\n  }\n}\n\n.section-text {\n  margin-bottom: 1rem;\n  line-height: 1.6;\n  color: #555;\n}\n\n.overview-image {\n  flex: 1;\n  display: flex;\n  justify-content: center;\n  \n  img {\n    max-width: 100%;\n    height: auto;\n    border-radius: 8px;\n    box-shadow: 0 8px 16px rgba(0, 0, 0, 0.1);\n  }\n}\n\n/* Mission Vision Section */\n.mission-vision-section {\n  display: flex;\n  gap: 2rem;\n  margin-bottom: 3rem;\n  \n  @media (max-width: 768px) {\n    flex-direction: column;\n  }\n}\n\n.mission-card, .vision-card {\n  flex: 1;\n  \n  mat-card {\n    height: 100%;\n    transition: transform 0.3s ease, box-shadow 0.3s ease;\n    \n    &:hover {\n      transform: translateY(-5px);\n      box-shadow: 0 8px 15px rgba(0, 0, 0, 0.1);\n    }\n    \n    mat-card-content {\n      padding-top: 1rem;\n      \n      p {\n        line-height: 1.6;\n        color: #555;\n      }\n    }\n  }\n}\n\n/* Values Section */\n.values-section {\n  margin-bottom: 3rem;\n}\n\n.values-grid {\n  display: grid;\n  grid-template-columns: repeat(4, 1fr);\n  gap: 2rem;\n  \n  @media (max-width: 992px) {\n    grid-template-columns: repeat(2, 1fr);\n  }\n  \n  @media (max-width: 576px) {\n    grid-template-columns: 1fr;\n  }\n}\n\n.value-item {\n  text-align: center;\n  transition: transform 0.3s ease;\n  \n  &:hover {\n    transform: translateY(-5px);\n    \n    .value-icon {\n      background-color: #1976d2;\n      \n      mat-icon {\n        color: white !important;\n      }\n    }\n  }\n  \n  h3 {\n    margin: 1rem 0 0.5rem;\n    color: #333;\n    font-weight: 500;\n  }\n  \n  p {\n    color: #666;\n    line-height: 1.5;\n  }\n}\n\n.value-icon {\n  width: 70px;\n  height: 70px;\n  border-radius: 50%;\n  background-color: #f5f7fa;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin: 0 auto;\n  transition: background-color 0.3s ease;\n  \n  mat-icon {\n    font-size: 2rem;\n    height: 2rem;\n    width: 2rem;\n    transition: color 0.3s ease;\n  }\n}\n\n/* Team Section */\n.team-section {\n  margin-bottom: 3rem;\n}\n\n.team-grid {\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  gap: 2rem;\n  \n  @media (max-width: 992px) {\n    grid-template-columns: repeat(2, 1fr);\n  }\n  \n  @media (max-width: 576px) {\n    grid-template-columns: 1fr;\n  }\n}\n\n.team-card {\n  transition: transform 0.3s ease, box-shadow 0.3s ease;\n  \n  &:hover {\n    transform: translateY(-5px);\n    box-shadow: 0 8px 15px rgba(0, 0, 0, 0.1);\n  }\n  \n  img {\n    height: 200px;\n    object-fit: cover;\n  }\n  \n  mat-card-content {\n    p {\n      color: #666;\n      line-height: 1.5;\n    }\n  }\n}\n\n/* History Section */\n.history-section {\n  margin-bottom: 3rem;\n}\n\n.timeline {\n  position: relative;\n  max-width: 800px;\n  margin: 0 auto;\n  padding: 2rem 0;\n  \n  &::before {\n    content: '';\n    position: absolute;\n    width: 4px;\n    background-color: #e0e0e0;\n    top: 0;\n    bottom: 0;\n    left: 50%;\n    transform: translateX(-50%);\n    border-radius: 2px;\n  }\n  \n  @media (max-width: 768px) {\n    &::before {\n      left: 30px;\n    }\n  }\n}\n\n.timeline-item {\n  padding: 1rem 2rem 1rem 0;\n  position: relative;\n  width: 50%;\n  left: 0;\n  \n  &:nth-child(even) {\n    left: 50%;\n  }\n  \n  @media (max-width: 768px) {\n    width: 100%;\n    padding-left: 70px;\n    padding-right: 0;\n    \n    &:nth-child(even) {\n      left: 0;\n    }\n  }\n}\n\n.timeline-date {\n  position: absolute;\n  top: 18px;\n  right: -65px;\n  background-color: #1976d2;\n  color: white;\n  border-radius: 20px;\n  padding: 0.5rem 1rem;\n  font-weight: 600;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n  \n  &::after {\n    content: '';\n    position: absolute;\n    width: 20px;\n    height: 20px;\n    background-color: #1976d2;\n    border-radius: 50%;\n    top: 50%;\n    left: -50px;\n    transform: translateY(-50%);\n    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n  }\n  \n  @media (max-width: 768px) {\n    left: 0;\n    right: auto;\n    \n    &::after {\n      left: 20px;\n    }\n  }\n}\n\n.timeline-item:nth-child(even) .timeline-date {\n  left: -65px;\n  right: auto;\n  \n  &::after {\n    right: -50px;\n    left: auto;\n  }\n  \n  @media (max-width: 768px) {\n    left: 0;\n    \n    &::after {\n      left: 20px;\n      right: auto;\n    }\n  }\n}\n\n.timeline-content {\n  padding: 1.5rem;\n  background-color: white;\n  border-radius: 8px;\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n  transition: transform 0.3s ease, box-shadow 0.3s ease;\n  \n  &:hover {\n    transform: translateY(-5px);\n    box-shadow: 0 8px 16px rgba(0, 0, 0, 0.1);\n  }\n  \n  h4 {\n    color: #1976d2;\n    margin: 0 0 0.5rem;\n    font-weight: 500;\n  }\n  \n  p {\n    margin: 0;\n    color: #666;\n    line-height: 1.5;\n  }\n}\n\n/* CTA Section */\n.contact-cta-section {\n  background-color: #f5f7fa;\n  padding: 3rem;\n  border-radius: 8px;\n  text-align: center;\n  margin-bottom: 3rem;\n}\n\n.cta-content {\n  max-width: 600px;\n  margin: 0 auto;\n  \n  h2 {\n    color: #1976d2;\n    margin-bottom: 1rem;\n    font-size: 1.8rem;\n  }\n  \n  p {\n    color: #666;\n    margin-bottom: 1.5rem;\n  }\n  \n  button {\n    padding: 0.5rem 2rem;\n    font-size: 1rem;\n  }\n} ",
                    "styleUrl": "./about.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"about-container\">\n  <!-- Banner Section -->\n  <section class=\"banner-section\">\n    <div class=\"banner-pattern-overlay\"></div>\n    <div class=\"banner-content\">\n      <div class=\"banner-title-container\">\n        <h1 class=\"banner-title\">Hakkımızda</h1>\n        <div class=\"banner-title-underline\"></div>\n      </div>\n      <p class=\"banner-text\">Bizim hikayemiz, misyonumuz ve değerlerimiz</p>\n    </div>\n  </section>\n\n  <!-- Company Overview Section -->\n  <section class=\"overview-section\">\n    <div class=\"section-content\">\n      <h2 class=\"section-title\">Biz Kimiz?</h2>\n      <div class=\"divider\"></div>\n      <p class=\"section-text\">\n        Firmamız, teknoloji ve yenilikçi çözümler konusunda uzmanlaşmış bir ekip tarafından kurulmuştur. Müşterilerimize en üst düzeyde hizmet sunmak için sürekli olarak kendimizi geliştiriyor ve sektördeki en son trendleri takip ediyoruz.\n      </p>\n      <p class=\"section-text\">\n        2010 yılında kurulan şirketimiz, web uygulamaları, mobil uygulamalar ve kurumsal yazılım çözümleri geliştirmektedir. Deneyimli ekibimiz ile her ölçekteki işletme için modern ve kullanıcı dostu çözümler sunuyoruz.\n      </p>\n    </div>\n    <div class=\"overview-image\">\n      <img src=\"assets/images/team.svg\" alt=\"Ekip İllüstrasyonu\">\n    </div>\n  </section>\n\n  <!-- Mission and Vision Section -->\n  <section class=\"mission-vision-section\">\n    <div class=\"mission-card\">\n      <mat-card>\n        <mat-card-header>\n          <div mat-card-avatar>\n            <mat-icon color=\"primary\">flag</mat-icon>\n          </div>\n          <mat-card-title>Misyonumuz</mat-card-title>\n        </mat-card-header>\n        <mat-card-content>\n          <p>\n            Müşterilerimize en yenilikçi ve kaliteli yazılım çözümlerini sunarak, iş süreçlerini kolaylaştırmak ve dijital dönüşümlerine katkıda bulunmak. Kullanıcı odaklı tasarımlarımız ve güvenilir teknolojilerimizle, müşterilerimizin başarısını kendi başarımız olarak görüyoruz.\n          </p>\n        </mat-card-content>\n      </mat-card>\n    </div>\n    <div class=\"vision-card\">\n      <mat-card>\n        <mat-card-header>\n          <div mat-card-avatar>\n            <mat-icon color=\"accent\">visibility</mat-icon>\n          </div>\n          <mat-card-title>Vizyonumuz</mat-card-title>\n        </mat-card-header>\n        <mat-card-content>\n          <p>\n            Bilişim sektöründe lider bir kuruluş olarak, sürekli yenilenen teknolojileri yakından takip ederek müşterilerimize katma değer sağlayan çözümler üretmek. Ulusal ve uluslararası pazarlarda tanınan, güvenilir bir teknoloji ortağı olmak.\n          </p>\n        </mat-card-content>\n      </mat-card>\n    </div>\n  </section>\n\n  <!-- Values Section -->\n  <section class=\"values-section\">\n    <h2 class=\"section-title\">Değerlerimiz</h2>\n    <div class=\"divider\"></div>\n    <div class=\"values-grid\">\n      <div class=\"value-item\">\n        <div class=\"value-icon\">\n          <mat-icon color=\"primary\">verified_user</mat-icon>\n        </div>\n        <h3>Güvenilirlik</h3>\n        <p>Müşterilerimize ve iş ortaklarımıza karşı her zaman dürüst ve şeffaf davranırız.</p>\n      </div>\n      <div class=\"value-item\">\n        <div class=\"value-icon\">\n          <mat-icon color=\"primary\">lightbulb</mat-icon>\n        </div>\n        <h3>Yenilikçilik</h3>\n        <p>Sürekli öğrenerek ve gelişerek, en son teknolojileri projelerimize entegre ederiz.</p>\n      </div>\n      <div class=\"value-item\">\n        <div class=\"value-icon\">\n          <mat-icon color=\"primary\">thumb_up</mat-icon>\n        </div>\n        <h3>Kalite</h3>\n        <p>Her projede en yüksek kalite standartlarını gözetiriz ve mükemmelliği hedefleriz.</p>\n      </div>\n      <div class=\"value-item\">\n        <div class=\"value-icon\">\n          <mat-icon color=\"primary\">people</mat-icon>\n        </div>\n        <h3>İşbirliği</h3>\n        <p>Müşterilerimizle yakın işbirliği içinde çalışarak, onların ihtiyaçlarını tam olarak karşılarız.</p>\n      </div>\n    </div>\n  </section>\n\n  <!-- Team Section -->\n  <section class=\"team-section\">\n    <h2 class=\"section-title\">Liderlik Ekibimiz</h2>\n    <div class=\"divider\"></div>\n    <div class=\"team-grid\">\n      <mat-card class=\"team-card\">\n        <img mat-card-image src=\"assets/images/profile1.svg\" alt=\"CEO\">\n        <mat-card-header>\n          <mat-card-title>Ahmet Yılmaz</mat-card-title>\n          <mat-card-subtitle>CEO</mat-card-subtitle>\n        </mat-card-header>\n        <mat-card-content>\n          <p>15+ yıllık teknoloji sektörü deneyimi ile şirketimizin kurucu ortağı ve CEO'su.</p>\n        </mat-card-content>\n      </mat-card>\n\n      <mat-card class=\"team-card\">\n        <img mat-card-image src=\"assets/images/profile2.svg\" alt=\"CTO\">\n        <mat-card-header>\n          <mat-card-title>Mehmet Kaya</mat-card-title>\n          <mat-card-subtitle>CTO</mat-card-subtitle>\n        </mat-card-header>\n        <mat-card-content>\n          <p>Yazılım mimarisi ve teknoloji stratejisinden sorumlu, deneyimli teknik direktör.</p>\n        </mat-card-content>\n      </mat-card>\n\n      <mat-card class=\"team-card\">\n        <img mat-card-image src=\"assets/images/profile3.svg\" alt=\"CMO\">\n        <mat-card-header>\n          <mat-card-title>Ayşe Demir</mat-card-title>\n          <mat-card-subtitle>CMO</mat-card-subtitle>\n        </mat-card-header>\n        <mat-card-content>\n          <p>Pazarlama stratejilerimizi yöneten, markalaşma ve büyüme konularında uzman.</p>\n        </mat-card-content>\n      </mat-card>\n    </div>\n  </section>\n\n  <!-- History Section -->\n  <section class=\"history-section\">\n    <h2 class=\"section-title\">Tarihçemiz</h2>\n    <div class=\"divider\"></div>\n    <div class=\"timeline\">\n      <div class=\"timeline-item\">\n        <div class=\"timeline-date\">\n          <span>2010</span>\n        </div>\n        <div class=\"timeline-content\">\n          <h4>Kuruluş</h4>\n          <p>Şirketimiz iki yazılım mühendisi tarafından kuruldu.</p>\n        </div>\n      </div>\n      <div class=\"timeline-item\">\n        <div class=\"timeline-date\">\n          <span>2013</span>\n        </div>\n        <div class=\"timeline-content\">\n          <h4>İlk Büyük Proje</h4>\n          <p>Ulusal çapta bir e-ticaret platformu için kapsamlı bir yazılım projesi geliştirdik.</p>\n        </div>\n      </div>\n      <div class=\"timeline-item\">\n        <div class=\"timeline-date\">\n          <span>2016</span>\n        </div>\n        <div class=\"timeline-content\">\n          <h4>Uluslararası Açılım</h4>\n          <p>İlk uluslararası müşterimiz ile çalışmaya başladık ve global pazara adım attık.</p>\n        </div>\n      </div>\n      <div class=\"timeline-item\">\n        <div class=\"timeline-date\">\n          <span>2020</span>\n        </div>\n        <div class=\"timeline-content\">\n          <h4>10. Yıl Dönümü</h4>\n          <p>10. yılımızda, 50+ çalışan ve 200+ başarılı proje ile büyümeye devam ediyoruz.</p>\n        </div>\n      </div>\n      <div class=\"timeline-item\">\n        <div class=\"timeline-date\">\n          <span>2023</span>\n        </div>\n        <div class=\"timeline-content\">\n          <h4>Teknoloji Ödülü</h4>\n          <p>Yenilikçi çözümlerimiz ile sektörün en prestijli teknoloji ödülünü kazandık.</p>\n        </div>\n      </div>\n    </div>\n  </section>\n\n  <!-- Contact CTA Section -->\n  <section class=\"contact-cta-section\">\n    <div class=\"cta-content\">\n      <h2>Projeleriniz için bizimle iletişime geçin</h2>\n      <p>İhtiyaçlarınıza özel çözümler için ekibimiz hazır.</p>\n      <button mat-raised-button color=\"primary\">İletişime Geç</button>\n    </div>\n  </section>\n</div> "
        },
        {
            "name": "AppComponent",
            "id": "component-AppComponent-332a2fffe45d7cf1c3bc7e2aa6e983e0e08ea21fd3dfe56f1655ca990601c2bd0f05a23a5f0e7fccd95b3d5b0eceb367d2dfe029d93b9e216df6d6bf6f8609d6",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "defaultValue": "'Frontend'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "RouterOutlet"
                },
                {
                    "name": "MainLayoutComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { RouterOutlet } from '@angular/router';\nimport { MainLayoutComponent } from './components/layout/main-layout/main-layout.component';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss'],\n  standalone: true,\n  imports: [RouterOutlet, MainLayoutComponent]\n})\nexport class AppComponent {\n  title = 'Frontend';\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<app-main-layout>\n  <router-outlet></router-outlet>\n</app-main-layout>\n"
        },
        {
            "name": "ContactComponent",
            "id": "component-ContactComponent-cd74e6bfe3a8cb48421aa617f1d3f40c3983d0ead9f09503ca4bd45ad0afd2e92689cdfe767ea4e3d737071708c323c678b3b30fdcf429f7de019657dec062eb",
            "file": "src/app/components/contact/contact.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-contact",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./contact.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "contactForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "subjectOptions",
                    "defaultValue": "[\n    'Genel Sorular',\n    'Ürün Bilgisi',\n    'Teknik Destek',\n    'İş Birliği Teklifi',\n    'Diğer'\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                }
            ],
            "methodsClass": [
                {
                    "name": "initForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "markFormGroupTouched",
                    "args": [
                        {
                            "name": "formGroup",
                            "type": "FormGroup",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "formGroup",
                            "type": "FormGroup",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "showNotification",
                    "args": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "type",
                            "type": "\"success\" | \"error\"",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "type",
                            "type": "\"success\" | \"error\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "MatFormFieldModule",
                    "type": "module"
                },
                {
                    "name": "MatInputModule",
                    "type": "module"
                },
                {
                    "name": "MatButtonModule",
                    "type": "module"
                },
                {
                    "name": "MatSelectModule",
                    "type": "module"
                },
                {
                    "name": "MatIconModule",
                    "type": "module"
                },
                {
                    "name": "MatSnackBarModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule, FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatSnackBar, MatSnackBarModule } from '@angular/material/snack-bar';\n\n@Component({\n  selector: 'app-contact',\n  standalone: true,\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatButtonModule,\n    MatSelectModule,\n    MatIconModule,\n    MatSnackBarModule\n  ],\n  templateUrl: './contact.component.html',\n  styleUrl: './contact.component.css'\n})\nexport class ContactComponent implements OnInit {\n  contactForm!: FormGroup;\n  subjectOptions: string[] = [\n    'Genel Sorular',\n    'Ürün Bilgisi',\n    'Teknik Destek',\n    'İş Birliği Teklifi',\n    'Diğer'\n  ];\n\n  constructor(\n    private fb: FormBuilder,\n    private snackBar: MatSnackBar\n  ) {}\n\n  ngOnInit(): void {\n    this.initForm();\n  }\n\n  initForm(): void {\n    this.contactForm = this.fb.group({\n      name: ['', [Validators.required, Validators.minLength(3)]],\n      email: ['', [Validators.required, Validators.email]],\n      subject: ['Genel Sorular', Validators.required],\n      message: ['', [Validators.required, Validators.minLength(10)]]\n    });\n  }\n\n  onSubmit(): void {\n    if (this.contactForm.valid) {\n      // Burada normalde bir API çağrısı olacak, simüle ediyoruz\n      console.log('Form değerleri:', this.contactForm.value);\n      \n      this.showNotification('Mesajınız başarıyla gönderildi. En kısa sürede size dönüş yapacağız.', 'success');\n      this.contactForm.reset({\n        subject: 'Genel Sorular'\n      });\n    } else {\n      this.showNotification('Lütfen formu doğru şekilde doldurun.', 'error');\n      this.markFormGroupTouched(this.contactForm);\n    }\n  }\n\n  // Tüm form kontrollerini dokunulmuş olarak işaretler\n  markFormGroupTouched(formGroup: FormGroup): void {\n    Object.values(formGroup.controls).forEach(control => {\n      control.markAsTouched();\n      if ((control as FormGroup).controls) {\n        this.markFormGroupTouched(control as FormGroup);\n      }\n    });\n  }\n\n  private showNotification(message: string, type: 'success' | 'error'): void {\n    this.snackBar.open(message, 'Kapat', {\n      duration: 5000,\n      horizontalPosition: 'end',\n      verticalPosition: 'top',\n      panelClass: type === 'success' ? ['success-snackbar'] : ['error-snackbar']\n    });\n  }\n}\n",
            "styleUrl": "./contact.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 35,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"contact-container\">\n  <div class=\"header\">\n    <h2>İletişim</h2>\n    <p>Bizimle iletişime geçmek için aşağıdaki formu doldurun.</p>\n  </div>\n\n  <div class=\"form-container\">\n    <form [formGroup]=\"contactForm\" (ngSubmit)=\"onSubmit()\">\n      <div class=\"form-row\">\n        <mat-form-field appearance=\"outline\">\n          <mat-label>Ad Soyad</mat-label>\n          <input matInput formControlName=\"name\" placeholder=\"Ad Soyad\" required>\n          <mat-icon matSuffix>person</mat-icon>\n          <mat-error *ngIf=\"contactForm.get('name')?.hasError('required')\">\n            Ad Soyad alanı zorunludur\n          </mat-error>\n          <mat-error *ngIf=\"contactForm.get('name')?.hasError('minlength')\">\n            Ad Soyad en az 3 karakter olmalıdır\n          </mat-error>\n        </mat-form-field>\n      </div>\n\n      <div class=\"form-row\">\n        <mat-form-field appearance=\"outline\">\n          <mat-label>E-posta</mat-label>\n          <input matInput type=\"email\" formControlName=\"email\" placeholder=\"ornek@email.com\" required>\n          <mat-icon matSuffix>email</mat-icon>\n          <mat-error *ngIf=\"contactForm.get('email')?.hasError('required')\">\n            E-posta alanı zorunludur\n          </mat-error>\n          <mat-error *ngIf=\"contactForm.get('email')?.hasError('email')\">\n            Geçerli bir e-posta adresi girin\n          </mat-error>\n        </mat-form-field>\n      </div>\n\n      <div class=\"form-row\">\n        <mat-form-field appearance=\"outline\">\n          <mat-label>Konu</mat-label>\n          <mat-select formControlName=\"subject\">\n            <mat-option *ngFor=\"let option of subjectOptions\" [value]=\"option\">\n              {{ option }}\n            </mat-option>\n          </mat-select>\n        </mat-form-field>\n      </div>\n\n      <div class=\"form-row\">\n        <mat-form-field appearance=\"outline\">\n          <mat-label>Mesajınız</mat-label>\n          <textarea matInput formControlName=\"message\" placeholder=\"Mesajınızı buraya yazın\" rows=\"6\" required></textarea>\n          <mat-error *ngIf=\"contactForm.get('message')?.hasError('required')\">\n            Mesaj alanı zorunludur\n          </mat-error>\n          <mat-error *ngIf=\"contactForm.get('message')?.hasError('minlength')\">\n            Mesaj en az 10 karakter olmalıdır\n          </mat-error>\n        </mat-form-field>\n      </div>\n\n      <div class=\"form-row submit-row\">\n        <button mat-raised-button color=\"primary\" type=\"submit\" [disabled]=\"contactForm.invalid\">\n          <mat-icon>send</mat-icon>\n          Gönder\n        </button>\n        <button mat-button type=\"button\" (click)=\"contactForm.reset({subject: 'Genel Sorular'})\">\n          Temizle\n        </button>\n      </div>\n    </form>\n  </div>\n\n  <div class=\"contact-info\">\n    <h3>İletişim Bilgileri</h3>\n    <div class=\"info-item\">\n      <mat-icon>location_on</mat-icon>\n      <p>Atatürk Bulvarı No:123, Bakırköy, İstanbul</p>\n    </div>\n    <div class=\"info-item\">\n      <mat-icon>phone</mat-icon>\n      <p>+90 212 123 45 67</p>\n    </div>\n    <div class=\"info-item\">\n      <mat-icon>email</mat-icon>\n      <p>info&#64;ornekfirma.com</p>\n    </div>\n    <div class=\"info-item\">\n      <mat-icon>access_time</mat-icon>\n      <p>Pazartesi - Cuma: 09:00 - 18:00</p>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-76a109d47c6836da29de9735ce58ad0e309f649d1dea9a531bb8b4af69095fd926ed590cb6a115109afac646337c4776b815f2c54d1206b1f7ddc6e7cb395475",
            "file": "src/app/components/layout/header/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-header",
            "styleUrls": [
                "./header.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./header.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "sidebarToggle",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "toggleSidebar",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "MatToolbarModule",
                    "type": "module"
                },
                {
                    "name": "MatButtonModule",
                    "type": "module"
                },
                {
                    "name": "MatIconModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Output } from '@angular/core';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\n\n@Component({\n  selector: 'app-header',\n  templateUrl: './header.component.html',\n  styleUrls: ['./header.component.scss'],\n  standalone: true,\n  imports: [MatToolbarModule, MatButtonModule, MatIconModule]\n})\nexport class HeaderComponent {\n  @Output() sidebarToggle = new EventEmitter<void>();\n\n  toggleSidebar() {\n    this.sidebarToggle.emit();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".spacer {\n  flex: 1 1 auto;\n}\n\nmat-toolbar {\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  z-index: 2;\n}\n",
                    "styleUrl": "./header.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<mat-toolbar color=\"primary\">\n  <button mat-icon-button (click)=\"toggleSidebar()\">\n    <mat-icon>menu</mat-icon>\n  </button>\n  <span>Angular & .NET Core Demo</span>\n  <span class=\"spacer\"></span>\n  <button mat-icon-button>\n    <mat-icon>account_circle</mat-icon>\n  </button>\n</mat-toolbar>\n"
        },
        {
            "name": "HomeComponent",
            "id": "component-HomeComponent-e69c5b29fc50c4b63aece85d42fab5794a1d675caedaf68994a3b10141a2fea4114c50b5ee9b869cf9c5b03ab329df3dafa10755489729868d26a037f9495706",
            "file": "src/app/components/home/home/home.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-home",
            "styleUrls": [
                "./home.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./home.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "RouterModule",
                    "type": "module"
                },
                {
                    "name": "MatButtonModule",
                    "type": "module"
                },
                {
                    "name": "MatCardModule",
                    "type": "module"
                },
                {
                    "name": "MatIconModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatIconModule } from '@angular/material/icon';\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.scss'],\n  standalone: true,\n  imports: [\n    RouterModule,\n    MatButtonModule,\n    MatCardModule,\n    MatIconModule\n  ]\n})\nexport class HomeComponent {\n  // Ekstra özellikler eklenebilir\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".home-container {\n  display: flex;\n  flex-direction: column;\n  max-width: 1200px;\n  margin: 0 auto;\n  padding: 20px;\n}\n\n// Hero Section\n.hero-section {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  gap: 40px;\n  margin-bottom: 60px;\n  padding: 40px 0;\n  \n  @media (max-width: 768px) {\n    flex-direction: column;\n    text-align: center;\n  }\n}\n\n.hero-content {\n  flex: 1;\n}\n\n.hero-title {\n  font-size: 2.5rem;\n  font-weight: 700;\n  margin-bottom: 16px;\n  color: #1976d2;\n}\n\n.hero-subtitle {\n  font-size: 1.2rem;\n  color: #666;\n  margin-bottom: 24px;\n  line-height: 1.5;\n}\n\n.hero-actions {\n  display: flex;\n  gap: 12px;\n  \n  @media (max-width: 768px) {\n    justify-content: center;\n  }\n}\n\n.hero-image {\n  flex: 1;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  \n  img {\n    max-width: 100%;\n    height: auto;\n  }\n}\n\n// Stats Section\n.stats-section {\n  display: grid;\n  grid-template-columns: repeat(4, 1fr);\n  gap: 20px;\n  margin-bottom: 60px;\n  \n  @media (max-width: 992px) {\n    grid-template-columns: repeat(2, 1fr);\n  }\n  \n  @media (max-width: 576px) {\n    grid-template-columns: 1fr;\n  }\n}\n\n.stat-card {\n  background-color: white;\n  border-radius: 8px;\n  padding: 24px;\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n  text-align: center;\n  transition: transform 0.3s ease, box-shadow 0.3s ease;\n  \n  &:hover {\n    transform: translateY(-5px);\n    box-shadow: 0 8px 15px rgba(0, 0, 0, 0.1);\n  }\n  \n  mat-icon {\n    font-size: 2.5rem;\n    height: 40px;\n    width: 40px;\n    margin-bottom: 16px;\n  }\n  \n  .stat-value {\n    font-size: 2rem;\n    font-weight: 700;\n    margin-bottom: 8px;\n  }\n  \n  .stat-label {\n    color: #666;\n    font-size: 1rem;\n  }\n}\n\n// Section Title\n.section-title {\n  font-size: 1.8rem;\n  font-weight: 600;\n  color: #1976d2;\n  margin-bottom: 24px;\n  text-align: center;\n  position: relative;\n  \n  &:after {\n    content: '';\n    position: absolute;\n    bottom: -10px;\n    left: 50%;\n    transform: translateX(-50%);\n    width: 60px;\n    height: 3px;\n    background-color: #1976d2;\n    border-radius: 2px;\n  }\n}\n\n// Features Section\n.features-section {\n  margin-bottom: 60px;\n}\n\n.features-grid {\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  gap: 24px;\n  \n  @media (max-width: 992px) {\n    grid-template-columns: repeat(2, 1fr);\n  }\n  \n  @media (max-width: 768px) {\n    grid-template-columns: 1fr;\n  }\n}\n\n.feature-card {\n  height: 100%;\n  transition: transform 0.3s ease, box-shadow 0.3s ease;\n  \n  &:hover {\n    transform: translateY(-5px);\n    box-shadow: 0 8px 15px rgba(0, 0, 0, 0.1);\n  }\n  \n  mat-card-content {\n    padding: 16px 0;\n    \n    p {\n      color: #666;\n      line-height: 1.6;\n    }\n  }\n}\n\n// Quick Actions\n.quick-actions {\n  margin-bottom: 40px;\n}\n\n.actions-container {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 16px;\n  justify-content: center;\n  \n  button {\n    min-width: 180px;\n    \n    mat-icon {\n      margin-right: 8px;\n    }\n  }\n}\n",
                    "styleUrl": "./home.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"home-container\">\n  <!-- Hero Section -->\n  <section class=\"hero-section\">\n    <div class=\"hero-content\">\n      <h1 class=\"hero-title\">Yönetim Paneline Hoş Geldiniz</h1>\n      <p class=\"hero-subtitle\">Angular ve .NET Core ile geliştirilmiş modern, güvenli ve hızlı yönetim çözümü</p>\n      <div class=\"hero-actions\">\n        <button mat-raised-button color=\"primary\">Keşfet</button>\n        <button mat-stroked-button color=\"accent\">Daha Fazla Bilgi</button>\n      </div>\n    </div>\n    <div class=\"hero-image\">\n      <img src=\"assets/images/dashboard.svg\" alt=\"Dashboard İllüstrasyonu\">\n    </div>\n  </section>\n\n  <!-- Stats Section -->\n  <section class=\"stats-section\">\n    <div class=\"stat-card\">\n      <mat-icon color=\"primary\">shopping_cart</mat-icon>\n      <div class=\"stat-value\">2540</div>\n      <div class=\"stat-label\">Toplam Ürün</div>\n    </div>\n    <div class=\"stat-card\">\n      <mat-icon color=\"accent\">people</mat-icon>\n      <div class=\"stat-value\">1250</div>\n      <div class=\"stat-label\">Aktif Kullanıcı</div>\n    </div>\n    <div class=\"stat-card\">\n      <mat-icon color=\"warn\">shopping_bag</mat-icon>\n      <div class=\"stat-value\">186</div>\n      <div class=\"stat-label\">Bugünkü Sipariş</div>\n    </div>\n    <div class=\"stat-card\">\n      <mat-icon style=\"color: #00C853\">trending_up</mat-icon>\n      <div class=\"stat-value\">%24</div>\n      <div class=\"stat-label\">Aylık Büyüme</div>\n    </div>\n  </section>\n\n  <!-- Features Section -->\n  <section class=\"features-section\">\n    <h2 class=\"section-title\">Özellikler</h2>\n    \n    <div class=\"features-grid\">\n      <mat-card class=\"feature-card\">\n        <mat-card-header>\n          <mat-icon mat-card-avatar color=\"primary\">inventory</mat-icon>\n          <mat-card-title>Ürün Yönetimi</mat-card-title>\n        </mat-card-header>\n        <mat-card-content>\n          <p>Ürünlerinizi kolayca ekleyin, düzenleyin ve takip edin. Kategorilere ayırın ve stok durumunu güncel tutun.</p>\n        </mat-card-content>\n        <mat-card-actions>\n          <button mat-button color=\"primary\" routerLink=\"/products\">DETAYLAR</button>\n        </mat-card-actions>\n      </mat-card>\n\n      <mat-card class=\"feature-card\">\n        <mat-card-header>\n          <mat-icon mat-card-avatar color=\"accent\">people</mat-icon>\n          <mat-card-title>Kullanıcı Yönetimi</mat-card-title>\n        </mat-card-header>\n        <mat-card-content>\n          <p>Kullanıcı hesaplarını yönetin, yetkilendirme ayarlarını yapın ve kullanıcı etkinliklerini izleyin.</p>\n        </mat-card-content>\n        <mat-card-actions>\n          <button mat-button color=\"accent\" routerLink=\"/users\">DETAYLAR</button>\n        </mat-card-actions>\n      </mat-card>\n\n      <mat-card class=\"feature-card\">\n        <mat-card-header>\n          <mat-icon mat-card-avatar color=\"warn\">settings</mat-icon>\n          <mat-card-title>Sistem Ayarları</mat-card-title>\n        </mat-card-header>\n        <mat-card-content>\n          <p>Uygulama ayarlarını özelleştirin, bildirim tercihlerini yapılandırın ve sistem parametrelerini düzenleyin.</p>\n        </mat-card-content>\n        <mat-card-actions>\n          <button mat-button color=\"warn\" routerLink=\"/settings\">DETAYLAR</button>\n        </mat-card-actions>\n      </mat-card>\n    </div>\n  </section>\n\n  <!-- Quick Actions -->\n  <section class=\"quick-actions\">\n    <h2 class=\"section-title\">Hızlı İşlemler</h2>\n    <div class=\"actions-container\">\n      <button mat-raised-button color=\"primary\">\n        <mat-icon>add</mat-icon> Yeni Ürün Ekle\n      </button>\n      <button mat-raised-button color=\"accent\">\n        <mat-icon>person_add</mat-icon> Kullanıcı Oluştur\n      </button>\n      <button mat-raised-button color=\"warn\">\n        <mat-icon>summarize</mat-icon> Rapor Oluştur\n      </button>\n      <button mat-raised-button color=\"basic\">\n        <mat-icon>backup</mat-icon> Yedekleme\n      </button>\n    </div>\n  </section>\n</div>\n"
        },
        {
            "name": "MainContentComponent",
            "id": "component-MainContentComponent-84a6bf32e1ca1084d7d31e528613a04e07c3b67f2a8be095b0090a11ac5be0da5ddf662fd564df4e7d2d1c5ca0f667667c9cbe67cb07b470f1b330a1f37b2004",
            "file": "src/app/components/layout/main-content/main-content.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-main-content",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./main-content.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-main-content',\n  imports: [],\n  templateUrl: './main-content.component.html',\n  styleUrl: './main-content.component.scss'\n})\nexport class MainContentComponent {\n\n}\n",
            "styleUrl": "./main-content.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<p>main-content works!</p>\n"
        },
        {
            "name": "MainLayoutComponent",
            "id": "component-MainLayoutComponent-35e4e98d57da2ba39c078433a428f1ed1d55c02b05a68f0910c4ef4b82cd5e6db75f00e7663706ca36f713d283cf411647a5ed9c94e613d60afc4f088d96934a",
            "file": "src/app/components/layout/main-layout/main-layout.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-main-layout",
            "styleUrls": [
                "./main-layout.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./main-layout.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "isHandset$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<boolean>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "isSidebarOpen",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                }
            ],
            "methodsClass": [
                {
                    "name": "toggleSidebar",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "RouterModule",
                    "type": "module"
                },
                {
                    "name": "ThemeModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { BreakpointObserver, Breakpoints } from '@angular/cdk/layout';\nimport { Observable } from 'rxjs';\nimport { map, shareReplay } from 'rxjs/operators';\nimport { RouterModule } from '@angular/router';\nimport { CommonModule } from '@angular/common';\nimport { ThemeModule } from '../../../theme/theme.module';\n\n@Component({\n  selector: 'app-main-layout',\n  templateUrl: './main-layout.component.html',\n  styleUrls: ['./main-layout.component.css'],\n  standalone: true,\n  imports: [\n    CommonModule,\n    RouterModule,\n    ThemeModule\n  ]\n})\nexport class MainLayoutComponent {\n  constructor(private breakpointObserver: BreakpointObserver) {\n    this.isHandset$ = this.breakpointObserver.observe(Breakpoints.Handset)\n      .pipe(\n        map(result => result.matches),\n        shareReplay()\n      );\n  }\n\n  isHandset$: Observable<boolean>;\n\n  isSidebarOpen = true;\n\n  toggleSidebar() {\n    this.isSidebarOpen = !this.isSidebarOpen;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".sidenav-container {\n  height: 100%;\n}\n\n.sidenav {\n  width: 250px;\n}\n\n.sidenav .mat-toolbar {\n  background: #1976d2;\n}\n\n.mat-toolbar.mat-primary {\n  position: sticky;\n  top: 0;\n  z-index: 1;\n}\n\n.content {\n  padding: 20px;\n}\n\n.toolbar-spacer {\n  flex: 1 1 auto;\n}\n\n.logo {\n  height: 40px;\n  width: 40px;\n  transition: transform 0.6s ease-in-out;\n  margin-right: 10px;\n}\n\n.logo:hover {\n  transform: rotate(360deg);\n}\n\n.logo-container {\n  display: flex;\n  align-items: center;\n  cursor: pointer;\n}\n\n.app-title {\n  white-space: nowrap;\n}\n\n.sidenav-header {\n  display: flex;\n  align-items: center;\n  padding: 0 16px;\n  height: 100%;\n  width: 100%;\n}\n\n.sidenav-logo {\n  height: 30px;\n  width: 30px;\n  margin-right: 10px;\n  transition: transform 0.6s ease-in-out;\n}\n\n.sidenav-logo:hover {\n  transform: rotate(360deg);\n}\n\n.sidenav-title {\n  color: white;\n  font-size: 1.2rem;\n  white-space: nowrap;\n  font-weight: 500;\n}\n\n.nav-link-text {\n  margin-left: 8px;\n}\n\nmat-icon {\n  margin-right: 8px;\n}\n\n.active {\n  background-color: rgba(0, 0, 0, 0.1);\n} ",
                    "styleUrl": "./main-layout.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "breakpointObserver",
                        "type": "BreakpointObserver",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "breakpointObserver",
                        "type": "BreakpointObserver",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<mat-sidenav-container class=\"sidenav-container\">\n  <mat-sidenav #drawer class=\"sidenav\" fixedInViewport\n      [attr.role]=\"(isHandset$ | async) ? 'dialog' : 'navigation'\"\n      [mode]=\"(isHandset$ | async) ? 'over' : 'side'\"\n      [opened]=\"(isHandset$ | async) === false\">\n    <mat-toolbar color=\"primary\">\n      <div class=\"sidenav-header\">\n        <svg class=\"sidenav-logo\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 250 250\">\n          <path fill=\"#FFFFFF\" d=\"M125 30L31.9 63.2l14.2 123.1L125 230l78.9-43.7 14.2-123.1z\"/>\n          <path fill=\"#FFFFFF\" opacity=\"0.8\" d=\"M125 30v22.2-.1V230l78.9-43.7 14.2-123.1L125 30z\"/>\n          <path fill=\"#1976d2\" d=\"M125 52.1L66.8 182.6h21.7l11.7-29.2h49.4l11.7 29.2H183L125 52.1zm17 83.3h-34l17-40.9 17 40.9z\"/>\n        </svg>\n        <span class=\"sidenav-title\">Demo App</span>\n      </div>\n    </mat-toolbar>\n    <mat-nav-list>\n      <a mat-list-item routerLink=\"/home\" routerLinkActive=\"active\">\n        <mat-icon>home</mat-icon>\n        <span class=\"nav-link-text\">Ana Sayfa</span>\n      </a>\n      <a mat-list-item routerLink=\"/todo\" routerLinkActive=\"active\">\n        <mat-icon>check_box</mat-icon>\n        <span class=\"nav-link-text\">Yapılacaklar</span>\n      </a>\n      <a mat-list-item routerLink=\"/about\" routerLinkActive=\"active\">\n        <mat-icon>info</mat-icon>\n        <span class=\"nav-link-text\">Hakkında</span>\n      </a>\n      <a mat-list-item routerLink=\"/contact\" routerLinkActive=\"active\">\n        <mat-icon>contact_mail</mat-icon>\n        <span class=\"nav-link-text\">İletişim</span>\n      </a>\n    </mat-nav-list>\n  </mat-sidenav>\n  <mat-sidenav-content>\n    <mat-toolbar color=\"primary\" class=\"toolbar\">\n      <button\n        type=\"button\"\n        aria-label=\"Toggle sidenav\"\n        mat-icon-button\n        (click)=\"drawer.toggle()\"\n        *ngIf=\"isHandset$ | async\">\n        <mat-icon aria-label=\"Side nav toggle icon\">menu</mat-icon>\n      </button>\n      <div class=\"logo-container\">\n        <svg class=\"logo\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 250 250\">\n          <path fill=\"#DD0031\" d=\"M125 30L31.9 63.2l14.2 123.1L125 230l78.9-43.7 14.2-123.1z\"/>\n          <path fill=\"#C3002F\" d=\"M125 30v22.2-.1V230l78.9-43.7 14.2-123.1L125 30z\"/>\n          <path fill=\"#FFFFFF\" d=\"M125 52.1L66.8 182.6h21.7l11.7-29.2h49.4l11.7 29.2H183L125 52.1zm17 83.3h-34l17-40.9 17 40.9z\"/>\n        </svg>\n        <span class=\"app-title\">Dashboard</span>\n      </div>\n      <span class=\"toolbar-spacer\"></span>\n      <button mat-icon-button [matMenuTriggerFor]=\"menu\" aria-label=\"User menu\">\n        <mat-icon>account_circle</mat-icon>\n      </button>\n      <mat-menu #menu=\"matMenu\">\n        <button mat-menu-item>\n          <mat-icon>person</mat-icon>\n          <span>Profil</span>\n        </button>\n        <button mat-menu-item>\n          <mat-icon>settings</mat-icon>\n          <span>Ayarlar</span>\n        </button>\n        <mat-divider></mat-divider>\n        <button mat-menu-item>\n          <mat-icon>exit_to_app</mat-icon>\n          <span>Çıkış</span>\n        </button>\n      </mat-menu>\n    </mat-toolbar>\n    <div class=\"content\">\n      <ng-content></ng-content>\n    </div>\n  </mat-sidenav-content>\n</mat-sidenav-container>\n"
        },
        {
            "name": "ProductsComponent",
            "id": "component-ProductsComponent-508e640942ac5cca8a72f2f9bbdf9a54ed352d60190f127bae01f98185ffb53ccc02ce621205b90ceb3e44cafa11e00a7736b442191b395cb2400bb74d0ad2d5",
            "file": "src/app/features/products/products/products.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-products",
            "styleUrls": [
                "./products.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./products.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "MatCardModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { MatCardModule } from '@angular/material/card';\n\n@Component({\n  selector: 'app-products',\n  templateUrl: './products.component.html',\n  styleUrls: ['./products.component.scss'],\n  standalone: true,\n  imports: [MatCardModule]\n})\nexport class ProductsComponent {}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./products.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"products-container\">\n  <mat-card>\n    <mat-card-header>\n      <mat-card-title>Ürünler</mat-card-title>\n    </mat-card-header>\n    <mat-card-content>\n      <p>Ürün listesi burada görüntülenecek.</p>\n    </mat-card-content>\n  </mat-card>\n</div>\n"
        },
        {
            "name": "SettingsComponent",
            "id": "component-SettingsComponent-7161bf19c2abde1039d88a3f919a48082e2df19413b9fddbb140e6a22e0d2ae1d361db90bfb4cc8e9543b43411a40f83c419bc472179cd933b62db19199d3ab1",
            "file": "src/app/features/settings/settings/settings.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-settings",
            "styleUrls": [
                "./settings.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./settings.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "MatCardModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { MatCardModule } from '@angular/material/card';\n\n@Component({\n  selector: 'app-settings',\n  templateUrl: './settings.component.html',\n  styleUrls: ['./settings.component.scss'],\n  standalone: true,\n  imports: [MatCardModule]\n})\nexport class SettingsComponent {}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./settings.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"settings-container\">\n  <mat-card>\n    <mat-card-header>\n      <mat-card-title>Ayarlar</mat-card-title>\n    </mat-card-header>\n    <mat-card-content>\n      <p>Sistem ayarları burada görüntülenecek.</p>\n    </mat-card-content>\n  </mat-card>\n</div>\n"
        },
        {
            "name": "SidebarComponent",
            "id": "component-SidebarComponent-d9e5cfeafeb079732b0d0b6cd69700c8b04aa00f63b969a72b5c248da7e94dbf19012e01a343e2da0f6663d9c8c62b71266a62094446e231d3d8bc03d10411c9",
            "file": "src/app/components/layout/sidebar/sidebar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-sidebar",
            "styleUrls": [],
            "styles": [
                "\n    .active {\n      background-color: rgba(0, 0, 0, 0.04);\n    }\n  "
            ],
            "template": "<mat-nav-list>\n  <a mat-list-item routerLink=\"/\" routerLinkActive=\"active\" [routerLinkActiveOptions]=\"{exact: true}\">\n    <mat-icon matListItemIcon>home</mat-icon>\n    <span matListItemTitle>Ana Sayfa</span>\n  </a>\n  <a mat-list-item routerLink=\"/todos\" routerLinkActive=\"active\">\n    <mat-icon matListItemIcon>checklist</mat-icon>\n    <span matListItemTitle>Görevlerim</span>\n  </a>\n  <a mat-list-item routerLink=\"/products\" routerLinkActive=\"active\">\n    <mat-icon matListItemIcon>inventory_2</mat-icon>\n    <span matListItemTitle>Ürünler</span>\n  </a>\n  <a mat-list-item routerLink=\"/users\" routerLinkActive=\"active\">\n    <mat-icon matListItemIcon>people</mat-icon>\n    <span matListItemTitle>Kullanıcılar</span>\n  </a>\n  <a mat-list-item routerLink=\"/settings\" routerLinkActive=\"active\">\n    <mat-icon matListItemIcon>settings</mat-icon>\n    <span matListItemTitle>Ayarlar</span>\n  </a>\n  <a mat-list-item routerLink=\"/about\" routerLinkActive=\"active\">\n    <mat-icon matListItemIcon>info</mat-icon>\n    <span matListItemTitle>Hakkında</span>\n  </a>\n  <a mat-list-item routerLink=\"/contact\" routerLinkActive=\"active\">\n    <mat-icon matListItemIcon>contact_mail</mat-icon>\n    <span matListItemTitle>İletişim</span>\n  </a>\n</mat-nav-list>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "MatListModule",
                    "type": "module"
                },
                {
                    "name": "MatIconModule",
                    "type": "module"
                },
                {
                    "name": "RouterModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { MatListModule } from '@angular/material/list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { RouterModule } from '@angular/router';\nimport { CommonModule } from '@angular/common';\n\n@Component({\n  selector: 'app-sidebar',\n  standalone: true,\n  imports: [CommonModule, MatListModule, MatIconModule, RouterModule],\n  template: `\n    <mat-nav-list>\n      <a mat-list-item routerLink=\"/\" routerLinkActive=\"active\" [routerLinkActiveOptions]=\"{exact: true}\">\n        <mat-icon matListItemIcon>home</mat-icon>\n        <span matListItemTitle>Ana Sayfa</span>\n      </a>\n      <a mat-list-item routerLink=\"/todos\" routerLinkActive=\"active\">\n        <mat-icon matListItemIcon>checklist</mat-icon>\n        <span matListItemTitle>Görevlerim</span>\n      </a>\n      <a mat-list-item routerLink=\"/products\" routerLinkActive=\"active\">\n        <mat-icon matListItemIcon>inventory_2</mat-icon>\n        <span matListItemTitle>Ürünler</span>\n      </a>\n      <a mat-list-item routerLink=\"/users\" routerLinkActive=\"active\">\n        <mat-icon matListItemIcon>people</mat-icon>\n        <span matListItemTitle>Kullanıcılar</span>\n      </a>\n      <a mat-list-item routerLink=\"/settings\" routerLinkActive=\"active\">\n        <mat-icon matListItemIcon>settings</mat-icon>\n        <span matListItemTitle>Ayarlar</span>\n      </a>\n      <a mat-list-item routerLink=\"/about\" routerLinkActive=\"active\">\n        <mat-icon matListItemIcon>info</mat-icon>\n        <span matListItemTitle>Hakkında</span>\n      </a>\n      <a mat-list-item routerLink=\"/contact\" routerLinkActive=\"active\">\n        <mat-icon matListItemIcon>contact_mail</mat-icon>\n        <span matListItemTitle>İletişim</span>\n      </a>\n    </mat-nav-list>\n  `,\n  styles: [`\n    .active {\n      background-color: rgba(0, 0, 0, 0.04);\n    }\n  `]\n})\nexport class SidebarComponent {}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n    .active {\n      background-color: rgba(0, 0, 0, 0.04);\n    }\n  \n",
            "extends": []
        },
        {
            "name": "TodoComponent",
            "id": "component-TodoComponent-e4b4a248251099aa7271f683d93c12ac03c601aeb9b60a8615c03915392a3ade7138980342f55253f03f2a2c086995aedfe3c12164cae896c3ee866a1bea0e77",
            "file": "src/app/components/todo/todo.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "MatDatepickerModule",
                    "type": "module"
                },
                {
                    "name": "MatNativeDateModule",
                    "type": "module"
                }
            ],
            "selector": "app-todo",
            "styleUrls": [],
            "styles": [
                "\n    .todo-container {\n      padding: 20px;\n      max-width: 1200px;\n      margin: 0 auto;\n    }\n\n    mat-card {\n      margin-bottom: 20px;\n    }\n\n    mat-card-header {\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n      margin-bottom: 20px;\n    }\n\n    .table-container {\n      position: relative;\n      min-height: 200px;\n      max-height: 400px;\n      overflow: auto;\n    }\n\n    table {\n      width: 100%;\n    }\n\n    .mat-column-actions {\n      width: 120px;\n      text-align: center;\n    }\n\n    .mat-column-isCompleted {\n      width: 100px;\n      text-align: center;\n    }\n\n    .mat-column-priority {\n      width: 120px;\n    }\n\n    .mat-column-dueDate {\n      width: 120px;\n    }\n\n    .loading-shade {\n      position: absolute;\n      top: 0;\n      left: 0;\n      bottom: 0;\n      right: 0;\n      background: rgba(0, 0, 0, 0.15);\n      z-index: 1;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n    }\n\n    .error-message {\n      color: #f44336;\n      padding: 16px;\n      text-align: center;\n    }\n  "
            ],
            "template": "<div class=\"todo-container\">\n  <mat-card>\n    <mat-card-header>\n      <mat-card-title>Görevlerim</mat-card-title>\n      <mat-card-subtitle>Yapılacak işlerin listesi</mat-card-subtitle>\n      <button mat-raised-button color=\"primary\" (click)=\"openDialog()\">\n        <mat-icon>add</mat-icon>\n        Yeni Görev\n      </button>\n    </mat-card-header>\n\n    <mat-card-content>\n      <div class=\"table-container\">\n        <table mat-table [dataSource]=\"dataSource\" matSort>\n          <!-- Başlık Sütunu -->\n          <ng-container matColumnDef=\"title\">\n            <th mat-header-cell *matHeaderCellDef mat-sort-header> Başlık </th>\n            <td mat-cell *matCellDef=\"let todo\"> {{todo.title}} </td>\n          </ng-container>\n\n          <!-- Açıklama Sütunu -->\n          <ng-container matColumnDef=\"description\">\n            <th mat-header-cell *matHeaderCellDef mat-sort-header> Açıklama </th>\n            <td mat-cell *matCellDef=\"let todo\"> {{todo.description}} </td>\n          </ng-container>\n\n          <!-- Bitiş Tarihi Sütunu -->\n          <ng-container matColumnDef=\"dueDate\">\n            <th mat-header-cell *matHeaderCellDef mat-sort-header> Bitiş Tarihi </th>\n            <td mat-cell *matCellDef=\"let todo\">\n              {{todo.dueDate | date:'dd.MM.yyyy'}}\n            </td>\n          </ng-container>\n\n          <!-- Öncelik Sütunu -->\n          <ng-container matColumnDef=\"priority\">\n            <th mat-header-cell *matHeaderCellDef mat-sort-header> Öncelik </th>\n            <td mat-cell *matCellDef=\"let todo\">\n              <mat-chip [color]=\"getPriorityColor(todo.priority)\" selected>\n                {{todo.priority}}\n              </mat-chip>\n            </td>\n          </ng-container>\n\n          <!-- Durum Sütunu -->\n          <ng-container matColumnDef=\"isCompleted\">\n            <th mat-header-cell *matHeaderCellDef> Durum </th>\n            <td mat-cell *matCellDef=\"let todo\">\n              <mat-checkbox\n                [checked]=\"todo.isCompleted\"\n                (change)=\"toggleComplete(todo)\"\n                color=\"primary\">\n              </mat-checkbox>\n            </td>\n          </ng-container>\n\n          <!-- İşlemler Sütunu -->\n          <ng-container matColumnDef=\"actions\">\n            <th mat-header-cell *matHeaderCellDef> İşlemler </th>\n            <td mat-cell *matCellDef=\"let todo\">\n              <button mat-icon-button [matMenuTriggerFor]=\"menu\" aria-label=\"İşlemler\">\n                <mat-icon>more_vert</mat-icon>\n              </button>\n              <mat-menu #menu=\"matMenu\">\n                <button mat-menu-item (click)=\"openDialog(todo)\">\n                  <mat-icon>edit</mat-icon>\n                  <span>Düzenle</span>\n                </button>\n                <button mat-menu-item (click)=\"deleteTodo(todo)\">\n                  <mat-icon>delete</mat-icon>\n                  <span>Sil</span>\n                </button>\n              </mat-menu>\n            </td>\n          </ng-container>\n\n          <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n          <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n        </table>\n\n        <mat-paginator\n          [pageSizeOptions]=\"[5, 10, 25, 100]\"\n          [pageSize]=\"10\"\n          [length]=\"totalItems\"\n          (page)=\"onPageChange($event)\">\n        </mat-paginator>\n      </div>\n    </mat-card-content>\n  </mat-card>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "currentPage",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 268
                },
                {
                    "name": "dataSource",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatTableDataSource<TodoViewModel>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 265
                },
                {
                    "name": "displayedColumns",
                    "defaultValue": "['title', 'description', 'dueDate', 'priority', 'isCompleted', 'actions']",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 264
                },
                {
                    "name": "isLoading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 266
                },
                {
                    "name": "pageSize",
                    "defaultValue": "10",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 269
                },
                {
                    "name": "paginator",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatPaginator",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 272,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "MatPaginator"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "sort",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatSort",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 271,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "MatSort"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "todos",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TodoViewModel[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 263
                },
                {
                    "name": "totalItems",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 267
                }
            ],
            "methodsClass": [
                {
                    "name": "createTodo",
                    "args": [
                        {
                            "name": "todo",
                            "type": "TodoViewModel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 336,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "todo",
                            "type": "TodoViewModel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteTodo",
                    "args": [
                        {
                            "name": "todo",
                            "type": "TodoViewModel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 362,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "todo",
                            "type": "TodoViewModel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getPriorityColor",
                    "args": [
                        {
                            "name": "priority",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 396,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "priority",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadTodos",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 292,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 287,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 283,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onPageChange",
                    "args": [
                        {
                            "name": "event",
                            "type": "PageEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 390,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "PageEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openDialog",
                    "args": [
                        {
                            "name": "todo",
                            "type": "TodoViewModel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 319,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "todo",
                            "type": "TodoViewModel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showNotification",
                    "args": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "type",
                            "type": "\"success\" | \"error\"",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 409,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "type",
                            "type": "\"success\" | \"error\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleComplete",
                    "args": [
                        {
                            "name": "todo",
                            "type": "TodoViewModel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 377,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "todo",
                            "type": "TodoViewModel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateTodo",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "todo",
                            "type": "TodoViewModel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 349,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "todo",
                            "type": "TodoViewModel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "MatTableModule",
                    "type": "module"
                },
                {
                    "name": "MatButtonModule",
                    "type": "module"
                },
                {
                    "name": "MatIconModule",
                    "type": "module"
                },
                {
                    "name": "MatDialogModule",
                    "type": "module"
                },
                {
                    "name": "MatFormFieldModule",
                    "type": "module"
                },
                {
                    "name": "MatInputModule",
                    "type": "module"
                },
                {
                    "name": "MatSelectModule",
                    "type": "module"
                },
                {
                    "name": "MatDatepickerModule",
                    "type": "module"
                },
                {
                    "name": "MatNativeDateModule",
                    "type": "module"
                },
                {
                    "name": "MatCheckboxModule",
                    "type": "module"
                },
                {
                    "name": "MatSnackBarModule",
                    "type": "module"
                },
                {
                    "name": "MatProgressSpinnerModule",
                    "type": "module"
                },
                {
                    "name": "MatCardModule",
                    "type": "module"
                },
                {
                    "name": "MatTooltipModule",
                    "type": "module"
                },
                {
                    "name": "MatSortModule",
                    "type": "module"
                },
                {
                    "name": "MatPaginatorModule",
                    "type": "module"
                },
                {
                    "name": "MatMenuModule",
                    "type": "module"
                },
                {
                    "name": "MatDividerModule",
                    "type": "module"
                },
                {
                    "name": "MatListModule",
                    "type": "module"
                },
                {
                    "name": "MatChipsModule",
                    "type": "module"
                },
                {
                    "name": "MatBadgeModule",
                    "type": "module"
                },
                {
                    "name": "MatExpansionModule",
                    "type": "module"
                },
                {
                    "name": "MatStepperModule",
                    "type": "module"
                },
                {
                    "name": "MatTabsModule",
                    "type": "module"
                },
                {
                    "name": "MatAutocompleteModule",
                    "type": "module"
                },
                {
                    "name": "MatButtonToggleModule",
                    "type": "module"
                },
                {
                    "name": "MatSlideToggleModule",
                    "type": "module"
                },
                {
                    "name": "MatSliderModule",
                    "type": "module"
                },
                {
                    "name": "MatSidenavModule",
                    "type": "module"
                },
                {
                    "name": "MatToolbarModule",
                    "type": "module"
                },
                {
                    "name": "MatGridListModule",
                    "type": "module"
                },
                {
                    "name": "MatRadioModule",
                    "type": "module"
                },
                {
                    "name": "MatProgressBarModule",
                    "type": "module"
                },
                {
                    "name": "MatRippleModule",
                    "type": "module"
                },
                {
                    "name": "MatBottomSheetModule",
                    "type": "module"
                },
                {
                    "name": "MatTreeModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, ViewChild } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatDividerModule } from '@angular/material/divider';\nimport { MatListModule } from '@angular/material/list';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatBadgeModule } from '@angular/material/badge';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatRippleModule } from '@angular/material/core';\nimport { MatBottomSheetModule } from '@angular/material/bottom-sheet';\nimport { MatTreeModule } from '@angular/material/tree';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { TodoService } from '../../services/todo.service';\nimport { Todo } from '../../models/todo.model';\nimport { TodoDialogComponent } from './todo-dialog/todo-dialog.component';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { MatDialog } from '@angular/material/dialog';\nimport { MatSort } from '@angular/material/sort';\nimport { MatPaginator, PageEvent } from '@angular/material/paginator';\nimport { BehaviorSubject, Observable, of } from 'rxjs';\nimport { catchError, finalize, map, tap } from 'rxjs/operators';\nimport { HttpClient } from '@angular/common/http';\n\ninterface TodoViewModel extends Todo {\n  description?: string;\n  dueDate?: Date;\n  priority?: 'low' | 'medium' | 'high';\n}\n\n@Component({\n  selector: 'app-todo',\n  standalone: true,\n  imports: [\n    CommonModule,\n    MatTableModule,\n    MatButtonModule,\n    MatIconModule,\n    MatDialogModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatSelectModule,\n    MatDatepickerModule,\n    MatNativeDateModule,\n    MatCheckboxModule,\n    MatSnackBarModule,\n    MatProgressSpinnerModule,\n    MatCardModule,\n    MatTooltipModule,\n    MatSortModule,\n    MatPaginatorModule,\n    MatMenuModule,\n    MatDividerModule,\n    MatListModule,\n    MatChipsModule,\n    MatBadgeModule,\n    MatExpansionModule,\n    MatStepperModule,\n    MatTabsModule,\n    MatAutocompleteModule,\n    MatButtonToggleModule,\n    MatSlideToggleModule,\n    MatSliderModule,\n    MatSidenavModule,\n    MatToolbarModule,\n    MatGridListModule,\n    MatRadioModule,\n    MatProgressBarModule,\n    MatRippleModule,\n    MatBottomSheetModule,\n    MatTreeModule\n  ],\n  providers: [\n    MatDatepickerModule,\n    MatNativeDateModule\n  ],\n  template: `\n    <div class=\"todo-container\">\n      <mat-card>\n        <mat-card-header>\n          <mat-card-title>Görevlerim</mat-card-title>\n          <mat-card-subtitle>Yapılacak işlerin listesi</mat-card-subtitle>\n          <button mat-raised-button color=\"primary\" (click)=\"openDialog()\">\n            <mat-icon>add</mat-icon>\n            Yeni Görev\n          </button>\n        </mat-card-header>\n\n        <mat-card-content>\n          <div class=\"table-container\">\n            <table mat-table [dataSource]=\"dataSource\" matSort>\n              <!-- Başlık Sütunu -->\n              <ng-container matColumnDef=\"title\">\n                <th mat-header-cell *matHeaderCellDef mat-sort-header> Başlık </th>\n                <td mat-cell *matCellDef=\"let todo\"> {{todo.title}} </td>\n              </ng-container>\n\n              <!-- Açıklama Sütunu -->\n              <ng-container matColumnDef=\"description\">\n                <th mat-header-cell *matHeaderCellDef mat-sort-header> Açıklama </th>\n                <td mat-cell *matCellDef=\"let todo\"> {{todo.description}} </td>\n              </ng-container>\n\n              <!-- Bitiş Tarihi Sütunu -->\n              <ng-container matColumnDef=\"dueDate\">\n                <th mat-header-cell *matHeaderCellDef mat-sort-header> Bitiş Tarihi </th>\n                <td mat-cell *matCellDef=\"let todo\">\n                  {{todo.dueDate | date:'dd.MM.yyyy'}}\n                </td>\n              </ng-container>\n\n              <!-- Öncelik Sütunu -->\n              <ng-container matColumnDef=\"priority\">\n                <th mat-header-cell *matHeaderCellDef mat-sort-header> Öncelik </th>\n                <td mat-cell *matCellDef=\"let todo\">\n                  <mat-chip [color]=\"getPriorityColor(todo.priority)\" selected>\n                    {{todo.priority}}\n                  </mat-chip>\n                </td>\n              </ng-container>\n\n              <!-- Durum Sütunu -->\n              <ng-container matColumnDef=\"isCompleted\">\n                <th mat-header-cell *matHeaderCellDef> Durum </th>\n                <td mat-cell *matCellDef=\"let todo\">\n                  <mat-checkbox\n                    [checked]=\"todo.isCompleted\"\n                    (change)=\"toggleComplete(todo)\"\n                    color=\"primary\">\n                  </mat-checkbox>\n                </td>\n              </ng-container>\n\n              <!-- İşlemler Sütunu -->\n              <ng-container matColumnDef=\"actions\">\n                <th mat-header-cell *matHeaderCellDef> İşlemler </th>\n                <td mat-cell *matCellDef=\"let todo\">\n                  <button mat-icon-button [matMenuTriggerFor]=\"menu\" aria-label=\"İşlemler\">\n                    <mat-icon>more_vert</mat-icon>\n                  </button>\n                  <mat-menu #menu=\"matMenu\">\n                    <button mat-menu-item (click)=\"openDialog(todo)\">\n                      <mat-icon>edit</mat-icon>\n                      <span>Düzenle</span>\n                    </button>\n                    <button mat-menu-item (click)=\"deleteTodo(todo)\">\n                      <mat-icon>delete</mat-icon>\n                      <span>Sil</span>\n                    </button>\n                  </mat-menu>\n                </td>\n              </ng-container>\n\n              <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n              <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n            </table>\n\n            <mat-paginator\n              [pageSizeOptions]=\"[5, 10, 25, 100]\"\n              [pageSize]=\"10\"\n              [length]=\"totalItems\"\n              (page)=\"onPageChange($event)\">\n            </mat-paginator>\n          </div>\n        </mat-card-content>\n      </mat-card>\n    </div>\n  `,\n  styles: [`\n    .todo-container {\n      padding: 20px;\n      max-width: 1200px;\n      margin: 0 auto;\n    }\n\n    mat-card {\n      margin-bottom: 20px;\n    }\n\n    mat-card-header {\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n      margin-bottom: 20px;\n    }\n\n    .table-container {\n      position: relative;\n      min-height: 200px;\n      max-height: 400px;\n      overflow: auto;\n    }\n\n    table {\n      width: 100%;\n    }\n\n    .mat-column-actions {\n      width: 120px;\n      text-align: center;\n    }\n\n    .mat-column-isCompleted {\n      width: 100px;\n      text-align: center;\n    }\n\n    .mat-column-priority {\n      width: 120px;\n    }\n\n    .mat-column-dueDate {\n      width: 120px;\n    }\n\n    .loading-shade {\n      position: absolute;\n      top: 0;\n      left: 0;\n      bottom: 0;\n      right: 0;\n      background: rgba(0, 0, 0, 0.15);\n      z-index: 1;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n    }\n\n    .error-message {\n      color: #f44336;\n      padding: 16px;\n      text-align: center;\n    }\n  `]\n})\nexport class TodoComponent implements OnInit {\n  todos: TodoViewModel[] = [];\n  displayedColumns: string[] = ['title', 'description', 'dueDate', 'priority', 'isCompleted', 'actions'];\n  dataSource: MatTableDataSource<TodoViewModel>;\n  isLoading = false;\n  totalItems = 0;\n  currentPage = 0;\n  pageSize = 10;\n\n  @ViewChild(MatSort) sort!: MatSort;\n  @ViewChild(MatPaginator) paginator!: MatPaginator;\n\n  constructor(\n    private todoService: TodoService,\n    private dialog: MatDialog,\n    private snackBar: MatSnackBar,\n    private http: HttpClient\n  ) {\n    this.dataSource = new MatTableDataSource<TodoViewModel>();\n  }\n\n  ngOnInit(): void {\n    this.loadTodos();\n  }\n\n  ngAfterViewInit(): void {\n    this.dataSource.sort = this.sort;\n    this.dataSource.paginator = this.paginator;\n  }\n\n  loadTodos(): void {\n    this.isLoading = true;\n    this.todoService.getTodos().pipe(\n      map(todos => {\n        return todos.map(todo => ({\n          ...todo,\n          description: todo.description || '',\n          dueDate: todo.dueDate ? new Date(todo.dueDate) : new Date(),\n          priority: todo.priority || 'medium'\n        }));\n      }),\n      tap(todos => {\n        this.todos = todos;\n        this.dataSource.data = todos;\n        this.totalItems = todos.length;\n      }),\n      catchError(error => {\n        console.error('Görevler yüklenirken hata oluştu:', error);\n        this.showNotification('Görevler yüklenirken bir hata oluştu', 'error');\n        return of([]);\n      }),\n      finalize(() => {\n        this.isLoading = false;\n      })\n    ).subscribe();\n  }\n\n  openDialog(todo?: TodoViewModel): void {\n    const dialogRef = this.dialog.open(TodoDialogComponent, {\n      width: '500px',\n      data: todo || {}\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n      if (result) {\n        if (todo?.id) {\n          this.updateTodo(todo.id, result);\n        } else {\n          this.createTodo(result);\n        }\n      }\n    });\n  }\n\n  createTodo(todo: TodoViewModel): void {\n    this.todoService.createTodo(todo).subscribe({\n      next: () => {\n        this.showNotification('Görev başarıyla oluşturuldu', 'success');\n        this.loadTodos();\n      },\n      error: (error) => {\n        console.error('Görev oluşturulurken hata:', error);\n        this.showNotification('Görev oluşturulurken bir hata oluştu', 'error');\n      }\n    });\n  }\n\n  updateTodo(id: number, todo: TodoViewModel): void {\n    this.todoService.updateTodo(id, todo).subscribe({\n      next: () => {\n        this.showNotification('Görev başarıyla güncellendi', 'success');\n        this.loadTodos();\n      },\n      error: (error) => {\n        console.error('Görev güncellenirken hata:', error);\n        this.showNotification('Görev güncellenirken bir hata oluştu', 'error');\n      }\n    });\n  }\n\n  deleteTodo(todo: TodoViewModel): void {\n    if (confirm('Bu görevi silmek istediğinizden emin misiniz?')) {\n      this.todoService.deleteTodo(todo.id).subscribe({\n        next: () => {\n          this.showNotification('Görev başarıyla silindi', 'success');\n          this.loadTodos();\n        },\n        error: (error) => {\n          console.error('Görev silinirken hata:', error);\n          this.showNotification('Görev silinirken bir hata oluştu', 'error');\n        }\n      });\n    }\n  }\n\n  toggleComplete(todo: TodoViewModel): void {\n    this.todoService.toggleTodoStatus(todo.id).subscribe({\n      next: () => {\n        this.showNotification('Görev durumu güncellendi', 'success');\n        this.loadTodos();\n      },\n      error: (error) => {\n        console.error('Görev durumu güncellenirken hata:', error);\n        this.showNotification('Görev durumu güncellenirken bir hata oluştu', 'error');\n      }\n    });\n  }\n\n  onPageChange(event: PageEvent): void {\n    this.currentPage = event.pageIndex;\n    this.pageSize = event.pageSize;\n    this.loadTodos();\n  }\n\n  getPriorityColor(priority: string): string {\n    switch (priority?.toLowerCase()) {\n      case 'high':\n        return 'warn';\n      case 'medium':\n        return 'accent';\n      case 'low':\n        return 'primary';\n      default:\n        return '';\n    }\n  }\n\n  showNotification(message: string, type: 'success' | 'error'): void {\n    this.snackBar.open(message, 'Kapat', {\n      duration: 3000,\n      horizontalPosition: 'end',\n      verticalPosition: 'top',\n      panelClass: type === 'success' ? ['success-snackbar'] : ['error-snackbar']\n    });\n  }\n} ",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n    .todo-container {\n      padding: 20px;\n      max-width: 1200px;\n      margin: 0 auto;\n    }\n\n    mat-card {\n      margin-bottom: 20px;\n    }\n\n    mat-card-header {\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n      margin-bottom: 20px;\n    }\n\n    .table-container {\n      position: relative;\n      min-height: 200px;\n      max-height: 400px;\n      overflow: auto;\n    }\n\n    table {\n      width: 100%;\n    }\n\n    .mat-column-actions {\n      width: 120px;\n      text-align: center;\n    }\n\n    .mat-column-isCompleted {\n      width: 100px;\n      text-align: center;\n    }\n\n    .mat-column-priority {\n      width: 120px;\n    }\n\n    .mat-column-dueDate {\n      width: 120px;\n    }\n\n    .loading-shade {\n      position: absolute;\n      top: 0;\n      left: 0;\n      bottom: 0;\n      right: 0;\n      background: rgba(0, 0, 0, 0.15);\n      z-index: 1;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n    }\n\n    .error-message {\n      color: #f44336;\n      padding: 16px;\n      text-align: center;\n    }\n  \n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "todoService",
                        "type": "TodoService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 272,
                "jsdoctags": [
                    {
                        "name": "todoService",
                        "type": "TodoService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "TodoDialogComponent",
            "id": "component-TodoDialogComponent-1ce7e382f44781af0c4c8e5bce6efbe173f73eaf0aa2979b00ab36835299dafab8b2b3a944445ac5f6a0f5dba1febf7f851c693f7f0d974e9ec481b8ed8fedb1",
            "file": "src/app/components/todo/todo-dialog/todo-dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "MatDatepickerModule",
                    "type": "module"
                },
                {
                    "name": "MatNativeDateModule",
                    "type": "module"
                }
            ],
            "selector": "app-todo-dialog",
            "styleUrls": [],
            "styles": [
                "\n    mat-dialog-content {\n      display: flex;\n      flex-direction: column;\n      gap: 1rem;\n      min-width: 400px;\n    }\n\n    mat-form-field {\n      width: 100%;\n    }\n\n    mat-dialog-actions {\n      padding: 16px 0;\n    }\n  "
            ],
            "template": "<h2 mat-dialog-title>{{ data.id ? 'Görevi Düzenle' : 'Yeni Görev' }}</h2>\n<form [formGroup]=\"todoForm\" (ngSubmit)=\"onSubmit()\">\n  <mat-dialog-content>\n    <mat-form-field appearance=\"fill\">\n      <mat-label>Başlık</mat-label>\n      <input matInput formControlName=\"title\" placeholder=\"Görev başlığı\">\n      <mat-error *ngIf=\"todoForm.get('title')?.hasError('required')\">\n        Başlık zorunludur\n      </mat-error>\n    </mat-form-field>\n\n    <mat-form-field appearance=\"fill\">\n      <mat-label>Açıklama</mat-label>\n      <textarea matInput formControlName=\"description\" rows=\"3\" placeholder=\"Görev açıklaması\"></textarea>\n      <mat-error *ngIf=\"todoForm.get('description')?.hasError('required')\">\n        Açıklama zorunludur\n      </mat-error>\n    </mat-form-field>\n\n    <mat-form-field appearance=\"fill\">\n      <mat-label>Bitiş Tarihi</mat-label>\n      <input matInput [matDatepicker]=\"picker\" formControlName=\"dueDate\">\n      <mat-datepicker-toggle matSuffix [for]=\"picker\"></mat-datepicker-toggle>\n      <mat-datepicker #picker></mat-datepicker>\n      <mat-error *ngIf=\"todoForm.get('dueDate')?.hasError('required')\">\n        Bitiş tarihi zorunludur\n      </mat-error>\n    </mat-form-field>\n\n    <mat-form-field appearance=\"fill\">\n      <mat-label>Öncelik</mat-label>\n      <mat-select formControlName=\"priority\">\n        <mat-option *ngFor=\"let priority of priorities\" [value]=\"priority\">\n          {{ priority | titlecase }}\n        </mat-option>\n      </mat-select>\n      <mat-error *ngIf=\"todoForm.get('priority')?.hasError('required')\">\n        Öncelik zorunludur\n      </mat-error>\n    </mat-form-field>\n  </mat-dialog-content>\n\n  <mat-dialog-actions align=\"end\">\n    <button mat-button (click)=\"onCancel()\">İptal</button>\n    <button mat-raised-button color=\"primary\" type=\"submit\" [disabled]=\"!todoForm.valid\">\n      {{ data.id ? 'Güncelle' : 'Ekle' }}\n    </button>\n  </mat-dialog-actions>\n</form>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TodoDialogData",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 112,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        170,
                        125
                    ]
                },
                {
                    "name": "priorities",
                    "defaultValue": "['low', 'medium', 'high'] as const",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 107
                },
                {
                    "name": "todoForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 106
                }
            ],
            "methodsClass": [
                {
                    "name": "onCancel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 128,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 122,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "MatDialogModule",
                    "type": "module"
                },
                {
                    "name": "MatFormFieldModule",
                    "type": "module"
                },
                {
                    "name": "MatInputModule",
                    "type": "module"
                },
                {
                    "name": "MatSelectModule",
                    "type": "module"
                },
                {
                    "name": "MatDatepickerModule",
                    "type": "module"
                },
                {
                    "name": "MatNativeDateModule",
                    "type": "module"
                },
                {
                    "name": "MatButtonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Inject } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators, ReactiveFormsModule } from '@angular/forms';\nimport { MatDialogRef, MAT_DIALOG_DATA, MatDialogModule } from '@angular/material/dialog';\nimport { CommonModule } from '@angular/common';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { Todo } from '../../../models/todo.model';\n\ninterface TodoDialogData extends Todo {\n  description?: string;\n  dueDate?: Date;\n  priority?: 'low' | 'medium' | 'high';\n}\n\n@Component({\n  selector: 'app-todo-dialog',\n  standalone: true,\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    MatDialogModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatSelectModule,\n    MatDatepickerModule,\n    MatNativeDateModule,\n    MatButtonModule\n  ],\n  providers: [\n    MatDatepickerModule,\n    MatNativeDateModule\n  ],\n  template: `\n    <h2 mat-dialog-title>{{ data.id ? 'Görevi Düzenle' : 'Yeni Görev' }}</h2>\n    <form [formGroup]=\"todoForm\" (ngSubmit)=\"onSubmit()\">\n      <mat-dialog-content>\n        <mat-form-field appearance=\"fill\">\n          <mat-label>Başlık</mat-label>\n          <input matInput formControlName=\"title\" placeholder=\"Görev başlığı\">\n          <mat-error *ngIf=\"todoForm.get('title')?.hasError('required')\">\n            Başlık zorunludur\n          </mat-error>\n        </mat-form-field>\n\n        <mat-form-field appearance=\"fill\">\n          <mat-label>Açıklama</mat-label>\n          <textarea matInput formControlName=\"description\" rows=\"3\" placeholder=\"Görev açıklaması\"></textarea>\n          <mat-error *ngIf=\"todoForm.get('description')?.hasError('required')\">\n            Açıklama zorunludur\n          </mat-error>\n        </mat-form-field>\n\n        <mat-form-field appearance=\"fill\">\n          <mat-label>Bitiş Tarihi</mat-label>\n          <input matInput [matDatepicker]=\"picker\" formControlName=\"dueDate\">\n          <mat-datepicker-toggle matSuffix [for]=\"picker\"></mat-datepicker-toggle>\n          <mat-datepicker #picker></mat-datepicker>\n          <mat-error *ngIf=\"todoForm.get('dueDate')?.hasError('required')\">\n            Bitiş tarihi zorunludur\n          </mat-error>\n        </mat-form-field>\n\n        <mat-form-field appearance=\"fill\">\n          <mat-label>Öncelik</mat-label>\n          <mat-select formControlName=\"priority\">\n            <mat-option *ngFor=\"let priority of priorities\" [value]=\"priority\">\n              {{ priority | titlecase }}\n            </mat-option>\n          </mat-select>\n          <mat-error *ngIf=\"todoForm.get('priority')?.hasError('required')\">\n            Öncelik zorunludur\n          </mat-error>\n        </mat-form-field>\n      </mat-dialog-content>\n\n      <mat-dialog-actions align=\"end\">\n        <button mat-button (click)=\"onCancel()\">İptal</button>\n        <button mat-raised-button color=\"primary\" type=\"submit\" [disabled]=\"!todoForm.valid\">\n          {{ data.id ? 'Güncelle' : 'Ekle' }}\n        </button>\n      </mat-dialog-actions>\n    </form>\n  `,\n  styles: [`\n    mat-dialog-content {\n      display: flex;\n      flex-direction: column;\n      gap: 1rem;\n      min-width: 400px;\n    }\n\n    mat-form-field {\n      width: 100%;\n    }\n\n    mat-dialog-actions {\n      padding: 16px 0;\n    }\n  `]\n})\nexport class TodoDialogComponent {\n  todoForm: FormGroup;\n  priorities = ['low', 'medium', 'high'] as const;\n\n  constructor(\n    private fb: FormBuilder,\n    private dialogRef: MatDialogRef<TodoDialogComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: TodoDialogData\n  ) {\n    this.todoForm = this.fb.group({\n      title: [data.title || '', [Validators.required]],\n      description: [data.description || '', [Validators.required]],\n      dueDate: [data.dueDate || new Date(), [Validators.required]],\n      priority: [data.priority || 'medium', [Validators.required]]\n    });\n  }\n\n  onSubmit(): void {\n    if (this.todoForm.valid) {\n      this.dialogRef.close(this.todoForm.value);\n    }\n  }\n\n  onCancel(): void {\n    this.dialogRef.close();\n  }\n} ",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n    mat-dialog-content {\n      display: flex;\n      flex-direction: column;\n      gap: 1rem;\n      min-width: 400px;\n    }\n\n    mat-form-field {\n      width: 100%;\n    }\n\n    mat-dialog-actions {\n      padding: 16px 0;\n    }\n  \n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<TodoDialogComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "data",
                        "type": "TodoDialogData",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 107,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<TodoDialogComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "data",
                        "type": "TodoDialogData",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": []
        },
        {
            "name": "TodoPageComponent",
            "id": "component-TodoPageComponent-5ded7728197c324542059b8833f44a09255fff9bf3eb28cad0b6dde624bcff6f44716a4e65d3501ef6132e71108845853b901142f21253a7a034997bfb19d7e2",
            "file": "src/app/components/todo-page/todo-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-todo-page",
            "styleUrls": [],
            "styles": [
                "\n    .todo-page-container {\n      padding: 20px;\n      max-width: 1200px;\n      margin: 0 auto;\n    }\n    \n    mat-card {\n      margin-bottom: 20px;\n    }\n\n    mat-card-header {\n      margin-bottom: 20px;\n    }\n  "
            ],
            "template": "<div class=\"todo-page-container\">\n  <mat-card>\n    <mat-card-header>\n      <mat-card-title>Görevlerim</mat-card-title>\n      <mat-card-subtitle>Yapılacak işlerin listesi</mat-card-subtitle>\n    </mat-card-header>\n    <mat-card-content>\n      <app-todo></app-todo>\n    </mat-card-content>\n  </mat-card>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "TodoComponent",
                    "type": "component"
                },
                {
                    "name": "MatCardModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { TodoComponent } from '../todo/todo.component';\nimport { MatCardModule } from '@angular/material/card';\n\n@Component({\n  selector: 'app-todo-page',\n  standalone: true,\n  imports: [CommonModule, TodoComponent, MatCardModule],\n  template: `\n    <div class=\"todo-page-container\">\n      <mat-card>\n        <mat-card-header>\n          <mat-card-title>Görevlerim</mat-card-title>\n          <mat-card-subtitle>Yapılacak işlerin listesi</mat-card-subtitle>\n        </mat-card-header>\n        <mat-card-content>\n          <app-todo></app-todo>\n        </mat-card-content>\n      </mat-card>\n    </div>\n  `,\n  styles: [`\n    .todo-page-container {\n      padding: 20px;\n      max-width: 1200px;\n      margin: 0 auto;\n    }\n    \n    mat-card {\n      margin-bottom: 20px;\n    }\n\n    mat-card-header {\n      margin-bottom: 20px;\n    }\n  `]\n})\nexport class TodoPageComponent {} ",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n    .todo-page-container {\n      padding: 20px;\n      max-width: 1200px;\n      margin: 0 auto;\n    }\n    \n    mat-card {\n      margin-bottom: 20px;\n    }\n\n    mat-card-header {\n      margin-bottom: 20px;\n    }\n  \n",
            "extends": []
        },
        {
            "name": "UsersComponent",
            "id": "component-UsersComponent-7cc28ba8b98bd6273284f83afe94b97870f942a7efe1ce75500fab48baa1cd1c13dd15e92d4be1eccd9ebdb987f14ac64d6497e7e4f4864cab19137c5b99104d",
            "file": "src/app/features/users/users/users.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-users",
            "styleUrls": [
                "./users.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./users.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "MatCardModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { MatCardModule } from '@angular/material/card';\n\n@Component({\n  selector: 'app-users',\n  templateUrl: './users.component.html',\n  styleUrls: ['./users.component.scss'],\n  standalone: true,\n  imports: [MatCardModule]\n})\nexport class UsersComponent {}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./users.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"users-container\">\n  <mat-card>\n    <mat-card-header>\n      <mat-card-title>Kullanıcılar</mat-card-title>\n    </mat-card-header>\n    <mat-card-content>\n      <p>Kullanıcı listesi burada görüntülenecek.</p>\n    </mat-card-content>\n  </mat-card>\n</div>\n"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "id": "module-AppModule-4f173704eb543a6a4f8f132601cd3403f0f0d77869221cbb1b026b27c25494346a13f4effcbc641d1e208338b2ab4028a2706ad1f0ae23648825460d304284da",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { HttpClientModule } from '@angular/common/http';\nimport { MAT_DATE_LOCALE } from '@angular/material/core';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { MainLayoutComponent } from './components/layout/main-layout/main-layout.component';\nimport { HomeComponent } from './components/home/home/home.component';\nimport { AboutComponent } from './components/about/about.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    MainLayoutComponent,\n    HomeComponent,\n    AboutComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    BrowserAnimationsModule,\n    ReactiveFormsModule,\n    CommonModule,\n    MatTableModule,\n    MatButtonModule,\n    MatIconModule,\n    MatDialogModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatSelectModule,\n    MatDatepickerModule,\n    MatNativeDateModule,\n    MatCheckboxModule,\n    HttpClientModule\n  ],\n  providers: [\n    { provide: MAT_DATE_LOCALE, useValue: 'tr-TR' }\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { } ",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AboutComponent"
                        },
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "HomeComponent"
                        },
                        {
                            "name": "MainLayoutComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "id": "module-AppRoutingModule-bda3a74ee6a1b7467e630e5139f0bf53a8fa49576185764ccedd9f5dda94efd4bab3a69d7407e412b9681957ccf0726b99b30ebe7dd8b0e079ae3cfddf758e43",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { MainLayoutComponent } from './components/layout/main-layout/main-layout.component';\nimport { HomeComponent } from './components/home/home/home.component';\nimport { TodoComponent } from './components/todo/todo.component';\nimport { AboutComponent } from './components/about/about.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: MainLayoutComponent,\n    children: [\n      { path: '', component: HomeComponent },\n      { path: 'todo', loadComponent: () => \"import('./components/todo/todo.component').then(m => m.TodoComponent)\" },\n      { path: 'about', component: AboutComponent }\n    ]\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { } ",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ThemeModule",
            "id": "module-ThemeModule-a6726b468ebd650a663590e8a1f7958181b5b40348c9788dc213587363a988439b2f160c04f4c40817ec7376e677bbcebdc02c90e62c2a5ffc8979dbfc9f7de8",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/theme/theme.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatDividerModule } from '@angular/material/divider';\n\nconst MaterialModules = [\n  MatButtonModule,\n  MatToolbarModule,\n  MatSidenavModule,\n  MatIconModule,\n  MatListModule,\n  MatMenuModule,\n  MatDividerModule\n];\n\n@NgModule({\n  declarations: [],\n  imports: [\n    CommonModule,\n    ...MaterialModules\n  ],\n  exports: [\n    ...MaterialModules\n  ]\n})\nexport class ThemeModule { } ",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "angularApp",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/server.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new AngularNodeAppEngine()"
            },
            {
                "name": "app",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/server.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "express()"
            },
            {
                "name": "appConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ApplicationConfig",
                "defaultValue": "{\n  providers: [\n    provideRouter(routes, withViewTransitions()),\n    provideAnimations(),\n    provideHttpClient(withFetch()),\n    importProvidersFrom(MatDatepickerModule),\n    importProvidersFrom(MatNativeDateModule),\n    { provide: MAT_DATE_LOCALE, useValue: 'tr-TR' }\n  ]\n}"
            },
            {
                "name": "bootstrap",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/main.server.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => bootstrapApplication(AppComponent, config)"
            },
            {
                "name": "browserDistFolder",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/server.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "resolve(serverDistFolder, '../browser')"
            },
            {
                "name": "config",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.config.server.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "mergeApplicationConfig(appConfig, serverConfig)"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/todo/todo.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {},\n  parameters: {\n    docs: {\n      description: {\n        story: 'Varsayılan todo listesi görünümü. Tüm özellikler aktif ve örnek verilerle dolu.'\n      }\n    }\n  },\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n    \n    // Yeni görev ekleme butonunu bul\n    const addButton = canvas.getByRole('button', { name: /yeni görev/i });\n    \n    // Butona tıkla\n    await userEvent.click(addButton);\n    \n    // Dialog'un açıldığını kontrol et\n    const dialog = canvas.getByRole('dialog');\n    expect(dialog).toBeTruthy();\n  }\n}"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/layout/header/header.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {},\n}"
            },
            {
                "name": "EmptyList",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/todo/todo.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  decorators: [\n    moduleMetadata({\n      providers: [\n        { \n          provide: HttpClient, \n          useClass: class {\n            get() { return of([]); }\n            post() { return of({ id: 1, title: 'Yeni Görev', isCompleted: false }); }\n            put() { return of({}); }\n            delete() { return of({}); }\n            patch() { return of({}); }\n          }\n        }\n      ]\n    })\n  ],\n  parameters: {\n    docs: {\n      description: {\n        story: 'Henüz hiç görev olmadığında görünen boş liste durumu.'\n      }\n    }\n  }\n}"
            },
            {
                "name": "Error",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/todo/todo.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  decorators: [\n    moduleMetadata({\n      providers: [\n        { \n          provide: HttpClient, \n          useClass: class {\n            get() { \n              return of([]).pipe(\n                catchError(() => throwError(() => new HttpErrorResponse({ error: 'API Hatası' })))\n              );\n            }\n            post() { return of({}); }\n            put() { return of({}); }\n            delete() { return of({}); }\n            patch() { return of({}); }\n          }\n        }\n      ]\n    })\n  ],\n  parameters: {\n    docs: {\n      description: {\n        story: 'API hatası durumunda görünen hata mesajı.'\n      }\n    }\n  }\n}"
            },
            {
                "name": "Loading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/todo/todo.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  decorators: [\n    moduleMetadata({\n      providers: [\n        { \n          provide: HttpClient, \n          useClass: class {\n            get() { \n              // Asla tamamlanmayan bir observable\n              return NEVER;\n            }\n            post() { return of({}); }\n            put() { return of({}); }\n            delete() { return of({}); }\n            patch() { return of({}); }\n          }\n        }\n      ]\n    })\n  ],\n  parameters: {\n    docs: {\n      description: {\n        story: 'Görevler yüklenirken görünen yükleme durumu.'\n      }\n    }\n  }\n}"
            },
            {
                "name": "MaterialModules",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/theme/theme.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  MatButtonModule,\n  MatToolbarModule,\n  MatSidenavModule,\n  MatIconModule,\n  MatListModule,\n  MatMenuModule,\n  MatDividerModule\n]"
            },
            {
                "name": "mockDialog",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/todo/todo.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  open: () => mockDialogRef,\n  closeAll: () => {}\n}"
            },
            {
                "name": "mockDialogRef",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/todo/todo.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  afterClosed: () => of({\n    title: 'Yeni Test Görevi',\n    description: 'Bu bir test görevidir',\n    priority: 'medium',\n    dueDate: new Date(),\n    isCompleted: false\n  }),\n  close: () => {}\n}"
            },
            {
                "name": "mockSnackBar",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/todo/todo.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  open: (message: string, action: string, config: any) => ({\n    onAction: () => of({ dismissedByAction: true }),\n    afterDismissed: () => of({ dismissedByAction: false })\n  })\n}"
            },
            {
                "name": "reqHandler",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/server.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createNodeRequestHandler(app)",
                "rawdescription": "Request handler used by the Angular CLI (for dev-server and during build) or Firebase Cloud Functions.",
                "description": "<p>Request handler used by the Angular CLI (for dev-server and during build) or Firebase Cloud Functions.</p>\n"
            },
            {
                "name": "sampleTodos",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/todo/todo.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  { \n    id: 1, \n    title: 'Görev 1', \n    description: 'Bu bir test görevidir', \n    isCompleted: false\n  },\n  { \n    id: 2, \n    title: 'Görev 2', \n    description: 'Başka bir test görevidir', \n    isCompleted: true\n  },\n  { \n    id: 3, \n    title: 'Görev 3', \n    description: 'Üçüncü görev', \n    isCompleted: false\n  }\n]"
            },
            {
                "name": "serverConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.config.server.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ApplicationConfig",
                "defaultValue": "{\n  providers: [\n    provideServerRendering(),\n    provideServerRouting(serverRoutes)\n  ]\n}"
            },
            {
                "name": "serverDistFolder",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/server.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "dirname(fileURLToPath(import.meta.url))"
            },
            {
                "name": "serverRoutes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.routes.server.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ServerRoute[]",
                "defaultValue": "[\n  {\n    path: '**',\n    renderMode: RenderMode.Prerender\n  }\n]"
            },
            {
                "name": "WithSidebarToggleAction",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/layout/header/header.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {},\n  play: async ({ component }) => {\n    component.sidebarToggle.subscribe(action('sidebarToggle'));\n  }\n}"
            }
        ],
        "functions": [],
        "typealiases": [
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<TodoComponent>",
                "file": "src/app/components/todo/todo.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<HeaderComponent>",
                "file": "src/app/components/layout/header/header.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            }
        ],
        "enumerations": [],
        "groupedVariables": {
            "src/server.ts": [
                {
                    "name": "angularApp",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/server.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new AngularNodeAppEngine()"
                },
                {
                    "name": "app",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/server.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "express()"
                },
                {
                    "name": "browserDistFolder",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/server.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "resolve(serverDistFolder, '../browser')"
                },
                {
                    "name": "reqHandler",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/server.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createNodeRequestHandler(app)",
                    "rawdescription": "Request handler used by the Angular CLI (for dev-server and during build) or Firebase Cloud Functions.",
                    "description": "<p>Request handler used by the Angular CLI (for dev-server and during build) or Firebase Cloud Functions.</p>\n"
                },
                {
                    "name": "serverDistFolder",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/server.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "dirname(fileURLToPath(import.meta.url))"
                }
            ],
            "src/app/app.config.ts": [
                {
                    "name": "appConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApplicationConfig",
                    "defaultValue": "{\n  providers: [\n    provideRouter(routes, withViewTransitions()),\n    provideAnimations(),\n    provideHttpClient(withFetch()),\n    importProvidersFrom(MatDatepickerModule),\n    importProvidersFrom(MatNativeDateModule),\n    { provide: MAT_DATE_LOCALE, useValue: 'tr-TR' }\n  ]\n}"
                }
            ],
            "src/main.server.ts": [
                {
                    "name": "bootstrap",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/main.server.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => bootstrapApplication(AppComponent, config)"
                }
            ],
            "src/app/app.config.server.ts": [
                {
                    "name": "config",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.config.server.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "mergeApplicationConfig(appConfig, serverConfig)"
                },
                {
                    "name": "serverConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.config.server.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApplicationConfig",
                    "defaultValue": "{\n  providers: [\n    provideServerRendering(),\n    provideServerRouting(serverRoutes)\n  ]\n}"
                }
            ],
            "src/app/components/todo/todo.component.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/todo/todo.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {},\n  parameters: {\n    docs: {\n      description: {\n        story: 'Varsayılan todo listesi görünümü. Tüm özellikler aktif ve örnek verilerle dolu.'\n      }\n    }\n  },\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n    \n    // Yeni görev ekleme butonunu bul\n    const addButton = canvas.getByRole('button', { name: /yeni görev/i });\n    \n    // Butona tıkla\n    await userEvent.click(addButton);\n    \n    // Dialog'un açıldığını kontrol et\n    const dialog = canvas.getByRole('dialog');\n    expect(dialog).toBeTruthy();\n  }\n}"
                },
                {
                    "name": "EmptyList",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/todo/todo.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  decorators: [\n    moduleMetadata({\n      providers: [\n        { \n          provide: HttpClient, \n          useClass: class {\n            get() { return of([]); }\n            post() { return of({ id: 1, title: 'Yeni Görev', isCompleted: false }); }\n            put() { return of({}); }\n            delete() { return of({}); }\n            patch() { return of({}); }\n          }\n        }\n      ]\n    })\n  ],\n  parameters: {\n    docs: {\n      description: {\n        story: 'Henüz hiç görev olmadığında görünen boş liste durumu.'\n      }\n    }\n  }\n}"
                },
                {
                    "name": "Error",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/todo/todo.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  decorators: [\n    moduleMetadata({\n      providers: [\n        { \n          provide: HttpClient, \n          useClass: class {\n            get() { \n              return of([]).pipe(\n                catchError(() => throwError(() => new HttpErrorResponse({ error: 'API Hatası' })))\n              );\n            }\n            post() { return of({}); }\n            put() { return of({}); }\n            delete() { return of({}); }\n            patch() { return of({}); }\n          }\n        }\n      ]\n    })\n  ],\n  parameters: {\n    docs: {\n      description: {\n        story: 'API hatası durumunda görünen hata mesajı.'\n      }\n    }\n  }\n}"
                },
                {
                    "name": "Loading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/todo/todo.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  decorators: [\n    moduleMetadata({\n      providers: [\n        { \n          provide: HttpClient, \n          useClass: class {\n            get() { \n              // Asla tamamlanmayan bir observable\n              return NEVER;\n            }\n            post() { return of({}); }\n            put() { return of({}); }\n            delete() { return of({}); }\n            patch() { return of({}); }\n          }\n        }\n      ]\n    })\n  ],\n  parameters: {\n    docs: {\n      description: {\n        story: 'Görevler yüklenirken görünen yükleme durumu.'\n      }\n    }\n  }\n}"
                },
                {
                    "name": "mockDialog",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/todo/todo.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  open: () => mockDialogRef,\n  closeAll: () => {}\n}"
                },
                {
                    "name": "mockDialogRef",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/todo/todo.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  afterClosed: () => of({\n    title: 'Yeni Test Görevi',\n    description: 'Bu bir test görevidir',\n    priority: 'medium',\n    dueDate: new Date(),\n    isCompleted: false\n  }),\n  close: () => {}\n}"
                },
                {
                    "name": "mockSnackBar",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/todo/todo.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  open: (message: string, action: string, config: any) => ({\n    onAction: () => of({ dismissedByAction: true }),\n    afterDismissed: () => of({ dismissedByAction: false })\n  })\n}"
                },
                {
                    "name": "sampleTodos",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/todo/todo.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  { \n    id: 1, \n    title: 'Görev 1', \n    description: 'Bu bir test görevidir', \n    isCompleted: false\n  },\n  { \n    id: 2, \n    title: 'Görev 2', \n    description: 'Başka bir test görevidir', \n    isCompleted: true\n  },\n  { \n    id: 3, \n    title: 'Görev 3', \n    description: 'Üçüncü görev', \n    isCompleted: false\n  }\n]"
                }
            ],
            "src/app/components/layout/header/header.component.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/layout/header/header.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {},\n}"
                },
                {
                    "name": "WithSidebarToggleAction",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/layout/header/header.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {},\n  play: async ({ component }) => {\n    component.sidebarToggle.subscribe(action('sidebarToggle'));\n  }\n}"
                }
            ],
            "src/app/theme/theme.module.ts": [
                {
                    "name": "MaterialModules",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/theme/theme.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  MatButtonModule,\n  MatToolbarModule,\n  MatSidenavModule,\n  MatIconModule,\n  MatListModule,\n  MatMenuModule,\n  MatDividerModule\n]"
                }
            ],
            "src/app/app.routes.server.ts": [
                {
                    "name": "serverRoutes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.routes.server.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ServerRoute[]",
                    "defaultValue": "[\n  {\n    path: '**',\n    renderMode: RenderMode.Prerender\n  }\n]"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {
            "src/app/components/todo/todo.component.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<TodoComponent>",
                    "file": "src/app/components/todo/todo.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "src/app/components/layout/header/header.component.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<HeaderComponent>",
                    "file": "src/app/components/layout/header/header.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ]
        }
    },
    "routes": [],
    "coverage": {
        "count": 3,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/app.config.server.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "config",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.config.server.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "serverConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "appConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.routes.server.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "serverRoutes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/about/about.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AboutComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/contact/contact.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ContactComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/components/home/home/home.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HomeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/layout/header/header.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/layout/header/header.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithSidebarToggleAction",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/layout/header/header.component.stories.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Story",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/layout/header/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/components/layout/main-content/main-content.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MainContentComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/layout/main-layout/main-layout.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MainLayoutComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/components/layout/sidebar/sidebar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SidebarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/todo-page/todo-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TodoPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/todo/todo-dialog/todo-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TodoDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/components/todo/todo-dialog/todo-dialog.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TodoDialogData",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/components/todo/todo.component.stories.ts",
                "type": "class",
                "linktype": "classe",
                "name": "HttpClientMock",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/components/todo/todo.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/todo/todo.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "EmptyList",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/todo/todo.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Error",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/todo/todo.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Loading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/todo/todo.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "mockDialog",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/todo/todo.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "mockDialogRef",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/todo/todo.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "mockSnackBar",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/todo/todo.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "sampleTodos",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/todo/todo.component.stories.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Story",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/todo/todo.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TodoComponent",
                "coveragePercent": 0,
                "coverageCount": "0/22",
                "status": "low"
            },
            {
                "filePath": "src/app/components/todo/todo.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TodoViewModel",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/features/products/products/products.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProductsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/settings/settings/settings.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SettingsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/users/users/users.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "UsersComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/models/todo.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Todo",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/services/todo.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TodoService",
                "coveragePercent": 66,
                "coverageCount": "6/9",
                "status": "good"
            },
            {
                "filePath": "src/app/theme/theme.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MaterialModules",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/main.server.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "bootstrap",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/server.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "angularApp",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/server.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "app",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/server.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "browserDistFolder",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/server.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "reqHandler",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "src/server.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "serverDistFolder",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}